<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1366" onload="init(evt)" viewBox="0 0 1200 1366" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1366" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1349.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1349.00"> </text><svg id="frames" x="10" width="1180" total_samples="387678470"><g><title>[[stack]] (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1285" width="0.1917%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1295.50"></text></g><g><title>pprof::collector::Collector&lt;T&gt;::new (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1269" width="0.1917%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1279.50"></text></g><g><title>&lt;pprof::collector::HashCounter&lt;T&gt; as core::default::Default&gt;::default (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1253" width="0.1917%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1237" width="0.1917%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1221" width="0.1917%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1205" width="0.1917%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1189" width="0.1917%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1173" width="0.1917%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1183.50"></text></g><g><title>core::ops::function::FnMut::call_mut (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1157" width="0.1917%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1167.50"></text></g><g><title>&lt;pprof::collector::Bucket&lt;T&gt; as core::default::Default&gt;::default (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1141" width="0.1917%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1125" width="0.1917%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1109" width="0.1917%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1119.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1093" width="0.1917%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1077" width="0.1917%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1061" width="0.1917%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1045" width="0.1917%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1029" width="0.1917%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1039.50"></text></g><g><title>__rustc::__rdl_alloc (743,297 samples, 0.19%)</title><rect x="0.0000%" y="1013" width="0.1917%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1023.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (743,297 samples, 0.19%)</title><rect x="0.0000%" y="997" width="0.1917%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="1007.50"></text></g><g><title>malloc (743,297 samples, 0.19%)</title><rect x="0.0000%" y="981" width="0.1917%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="743297"/><text x="0.2500%" y="991.50"></text></g><g><title>[libc.so.6] (15,431,514 samples, 3.98%)</title><rect x="0.1917%" y="1285" width="3.9805%" height="15" fill="rgb(249,33,26)" fg:x="743297" fg:w="15431514"/><text x="0.4417%" y="1295.50">[lib..</text></g><g><title>pprof::collector::Collector&lt;T&gt;::new (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1269" width="0.7063%" height="15" fill="rgb(235,183,28)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1279.50"></text></g><g><title>&lt;pprof::collector::HashCounter&lt;T&gt; as core::default::Default&gt;::default (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1253" width="0.7063%" height="15" fill="rgb(221,5,38)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1263.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1237" width="0.7063%" height="15" fill="rgb(247,18,42)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1221" width="0.7063%" height="15" fill="rgb(241,131,45)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1231.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1205" width="0.7063%" height="15" fill="rgb(249,31,29)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1189" width="0.7063%" height="15" fill="rgb(225,111,53)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1199.50"></text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1173" width="0.7063%" height="15" fill="rgb(238,160,17)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1183.50"></text></g><g><title>core::ops::function::FnMut::call_mut (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1157" width="0.7063%" height="15" fill="rgb(214,148,48)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1167.50"></text></g><g><title>&lt;pprof::collector::Bucket&lt;T&gt; as core::default::Default&gt;::default (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1141" width="0.7063%" height="15" fill="rgb(232,36,49)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1151.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1125" width="0.7063%" height="15" fill="rgb(209,103,24)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1135.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1109" width="0.7063%" height="15" fill="rgb(229,88,8)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1119.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1093" width="0.7063%" height="15" fill="rgb(213,181,19)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1077" width="0.7063%" height="15" fill="rgb(254,191,54)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1087.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1061" width="0.7063%" height="15" fill="rgb(241,83,37)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1071.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1045" width="0.7063%" height="15" fill="rgb(233,36,39)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1055.50"></text></g><g><title>alloc::alloc::alloc (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1029" width="0.7063%" height="15" fill="rgb(226,3,54)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1039.50"></text></g><g><title>__rustc::__rdl_alloc (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="1013" width="0.7063%" height="15" fill="rgb(245,192,40)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1023.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="997" width="0.7063%" height="15" fill="rgb(238,167,29)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="1007.50"></text></g><g><title>malloc (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="981" width="0.7063%" height="15" fill="rgb(232,182,51)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="991.50"></text></g><g><title>[libc.so.6] (2,738,221 samples, 0.71%)</title><rect x="4.1722%" y="965" width="0.7063%" height="15" fill="rgb(231,60,39)" fg:x="16174811" fg:w="2738221"/><text x="4.4222%" y="975.50"></text></g><g><title>__default_morecore (688,389 samples, 0.18%)</title><rect x="4.7010%" y="949" width="0.1776%" height="15" fill="rgb(208,69,12)" fg:x="18224643" fg:w="688389"/><text x="4.9510%" y="959.50"></text></g><g><title>brk (688,389 samples, 0.18%)</title><rect x="4.7010%" y="933" width="0.1776%" height="15" fill="rgb(235,93,37)" fg:x="18224643" fg:w="688389"/><text x="4.9510%" y="943.50"></text></g><g><title>[unknown] (688,389 samples, 0.18%)</title><rect x="4.7010%" y="917" width="0.1776%" height="15" fill="rgb(213,116,39)" fg:x="18224643" fg:w="688389"/><text x="4.9510%" y="927.50"></text></g><g><title>[unknown] (6,617,068 samples, 1.71%)</title><rect x="4.1722%" y="1285" width="1.7068%" height="15" fill="rgb(222,207,29)" fg:x="16174811" fg:w="6617068"/><text x="4.4222%" y="1295.50"></text></g><g><title>profile::main (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1269" width="1.0005%" height="15" fill="rgb(206,96,30)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1279.50"></text></g><g><title>profile::demean_impl (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1253" width="1.0005%" height="15" fill="rgb(218,138,4)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1263.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1237" width="1.0005%" height="15" fill="rgb(250,191,14)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1247.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1221" width="1.0005%" height="15" fill="rgb(239,60,40)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1231.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1205" width="1.0005%" height="15" fill="rgb(206,27,48)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1215.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1189" width="1.0005%" height="15" fill="rgb(225,35,8)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1199.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1173" width="1.0005%" height="15" fill="rgb(250,213,24)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1183.50"></text></g><g><title>profile::demean_impl::_{{closure}} (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1157" width="1.0005%" height="15" fill="rgb(247,123,22)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1167.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1141" width="1.0005%" height="15" fill="rgb(231,138,38)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1125" width="1.0005%" height="15" fill="rgb(231,145,46)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1135.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1109" width="1.0005%" height="15" fill="rgb(251,118,11)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1119.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1093" width="1.0005%" height="15" fill="rgb(217,147,25)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1103.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1077" width="1.0005%" height="15" fill="rgb(247,81,37)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1087.50"></text></g><g><title>alloc::alloc::dealloc (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1061" width="1.0005%" height="15" fill="rgb(209,12,38)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1071.50"></text></g><g><title>__rustc::__rdl_dealloc (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1045" width="1.0005%" height="15" fill="rgb(227,1,9)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1055.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1029" width="1.0005%" height="15" fill="rgb(248,47,43)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1039.50"></text></g><g><title>cfree (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="1013" width="1.0005%" height="15" fill="rgb(221,10,30)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1023.50"></text></g><g><title>[libc.so.6] (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="997" width="1.0005%" height="15" fill="rgb(210,229,1)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="1007.50"></text></g><g><title>__default_morecore (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="981" width="1.0005%" height="15" fill="rgb(222,148,37)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="991.50"></text></g><g><title>brk (3,878,847 samples, 1.00%)</title><rect x="4.8785%" y="965" width="1.0005%" height="15" fill="rgb(234,67,33)" fg:x="18913032" fg:w="3878847"/><text x="5.1285%" y="975.50"></text></g><g><title>pthread_getattr_np (501,504 samples, 0.13%)</title><rect x="5.8791%" y="1221" width="0.1294%" height="15" fill="rgb(247,98,35)" fg:x="22791879" fg:w="501504"/><text x="6.1291%" y="1231.50"></text></g><g><title>__isoc23_sscanf (501,504 samples, 0.13%)</title><rect x="5.8791%" y="1205" width="0.1294%" height="15" fill="rgb(247,138,52)" fg:x="22791879" fg:w="501504"/><text x="6.1291%" y="1215.50"></text></g><g><title>[libc.so.6] (501,504 samples, 0.13%)</title><rect x="5.8791%" y="1189" width="0.1294%" height="15" fill="rgb(213,79,30)" fg:x="22791879" fg:w="501504"/><text x="6.1291%" y="1199.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::collector::Collector&lt;pprof::frames::UnresolvedFrames&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1109" width="0.1859%" height="15" fill="rgb(246,177,23)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::collector::HashCounter&lt;pprof::frames::UnresolvedFrames&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1093" width="0.1859%" height="15" fill="rgb(230,62,27)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[pprof::collector::Bucket&lt;pprof::frames::UnresolvedFrames&gt;: 4096]&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1077" width="0.1859%" height="15" fill="rgb(216,154,8)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;[pprof::collector::Bucket&lt;pprof::frames::UnresolvedFrames&gt;: 4096]&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1061" width="0.1859%" height="15" fill="rgb(244,35,45)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::collector::Bucket&lt;pprof::frames::UnresolvedFrames&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1045" width="0.1859%" height="15" fill="rgb(251,115,12)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[pprof::collector::Entry&lt;pprof::frames::UnresolvedFrames&gt;: 4]&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1029" width="0.1859%" height="15" fill="rgb(240,54,50)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;[pprof::collector::Entry&lt;pprof::frames::UnresolvedFrames&gt;: 4]&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="1013" width="0.1859%" height="15" fill="rgb(233,84,52)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::collector::Entry&lt;pprof::frames::UnresolvedFrames&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="997" width="0.1859%" height="15" fill="rgb(207,117,47)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::frames::UnresolvedFrames&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="981" width="0.1859%" height="15" fill="rgb(249,43,39)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;smallvec::SmallVec&lt;[backtrace::backtrace::Frame: 128]&gt;&gt; (720,771 samples, 0.19%)</title><rect x="6.0084%" y="965" width="0.1859%" height="15" fill="rgb(209,38,44)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="975.50"></text></g><g><title>&lt;smallvec::SmallVec&lt;A&gt; as core::ops::drop::Drop&gt;::drop (720,771 samples, 0.19%)</title><rect x="6.0084%" y="949" width="0.1859%" height="15" fill="rgb(236,212,23)" fg:x="23293383" fg:w="720771"/><text x="6.2584%" y="959.50"></text></g><g><title>[libc.so.6] (1,357,305 samples, 0.35%)</title><rect x="6.2893%" y="837" width="0.3501%" height="15" fill="rgb(242,79,21)" fg:x="24382072" fg:w="1357305"/><text x="6.5393%" y="847.50"></text></g><g><title>[unknown] (1,357,305 samples, 0.35%)</title><rect x="6.2893%" y="821" width="0.3501%" height="15" fill="rgb(211,96,35)" fg:x="24382072" fg:w="1357305"/><text x="6.5393%" y="831.50"></text></g><g><title>core::array::_&lt;impl core::default::Default for [T: 4]&gt;::default (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="949" width="0.7697%" height="15" fill="rgb(253,215,40)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="959.50"></text></g><g><title>&lt;pprof::collector::Entry&lt;T&gt; as core::default::Default&gt;::default (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="933" width="0.7697%" height="15" fill="rgb(211,81,21)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="943.50"></text></g><g><title>&lt;pprof::frames::UnresolvedFrames as core::default::Default&gt;::default (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="917" width="0.7697%" height="15" fill="rgb(208,190,38)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="927.50"></text></g><g><title>std::time::SystemTime::now (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="901" width="0.7697%" height="15" fill="rgb(235,213,38)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="911.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="885" width="0.7697%" height="15" fill="rgb(237,122,38)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="895.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2,983,850 samples, 0.77%)</title><rect x="6.1943%" y="869" width="0.7697%" height="15" fill="rgb(244,218,35)" fg:x="24014154" fg:w="2983850"/><text x="6.4443%" y="879.50"></text></g><g><title>clock_gettime (2,615,932 samples, 0.67%)</title><rect x="6.2893%" y="853" width="0.6748%" height="15" fill="rgb(240,68,47)" fg:x="24382072" fg:w="2615932"/><text x="6.5393%" y="863.50"></text></g><g><title>__vdso_clock_gettime (1,258,627 samples, 0.32%)</title><rect x="6.6394%" y="837" width="0.3247%" height="15" fill="rgb(210,16,53)" fg:x="25739377" fg:w="1258627"/><text x="6.8894%" y="847.50"></text></g><g><title>[[vdso]] (348,068 samples, 0.09%)</title><rect x="6.8742%" y="821" width="0.0898%" height="15" fill="rgb(235,124,12)" fg:x="26649936" fg:w="348068"/><text x="7.1242%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;pprof::profiler::ProfilerGuard&gt; (16,233,564 samples, 4.19%)</title><rect x="6.0084%" y="1173" width="4.1874%" height="15" fill="rgb(224,169,11)" fg:x="23293383" fg:w="16233564"/><text x="6.2584%" y="1183.50">core:..</text></g><g><title>&lt;pprof::profiler::ProfilerGuard as core::ops::drop::Drop&gt;::drop (16,233,564 samples, 4.19%)</title><rect x="6.0084%" y="1157" width="4.1874%" height="15" fill="rgb(250,166,2)" fg:x="23293383" fg:w="16233564"/><text x="6.2584%" y="1167.50">&lt;ppro..</text></g><g><title>pprof::profiler::Profiler::stop (16,233,564 samples, 4.19%)</title><rect x="6.0084%" y="1141" width="4.1874%" height="15" fill="rgb(242,216,29)" fg:x="23293383" fg:w="16233564"/><text x="6.2584%" y="1151.50">pprof..</text></g><g><title>pprof::profiler::Profiler::init (16,233,564 samples, 4.19%)</title><rect x="6.0084%" y="1125" width="4.1874%" height="15" fill="rgb(230,116,27)" fg:x="23293383" fg:w="16233564"/><text x="6.2584%" y="1135.50">pprof..</text></g><g><title>pprof::collector::Collector&lt;T&gt;::new (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1109" width="4.0015%" height="15" fill="rgb(228,99,48)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1119.50">ppro..</text></g><g><title>&lt;pprof::collector::HashCounter&lt;T&gt; as core::default::Default&gt;::default (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1093" width="4.0015%" height="15" fill="rgb(253,11,6)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1103.50">&lt;ppr..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1077" width="4.0015%" height="15" fill="rgb(247,143,39)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1087.50">allo..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1061" width="4.0015%" height="15" fill="rgb(236,97,10)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1071.50">allo..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1045" width="4.0015%" height="15" fill="rgb(233,208,19)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1055.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1029" width="4.0015%" height="15" fill="rgb(216,164,2)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1039.50">&lt;cor..</text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="1013" width="4.0015%" height="15" fill="rgb(220,129,5)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1023.50">&lt;cor..</text></g><g><title>core::ops::function::FnMut::call_mut (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="997" width="4.0015%" height="15" fill="rgb(242,17,10)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="1007.50">core..</text></g><g><title>&lt;pprof::collector::Bucket&lt;T&gt; as core::default::Default&gt;::default (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="981" width="4.0015%" height="15" fill="rgb(242,107,0)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="991.50">&lt;ppr..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (15,512,793 samples, 4.00%)</title><rect x="6.1943%" y="965" width="4.0015%" height="15" fill="rgb(251,28,31)" fg:x="24014154" fg:w="15512793"/><text x="6.4443%" y="975.50">&lt;all..</text></g><g><title>core::ptr::write (12,528,943 samples, 3.23%)</title><rect x="6.9640%" y="949" width="3.2318%" height="15" fill="rgb(233,223,10)" fg:x="26998004" fg:w="12528943"/><text x="7.2140%" y="959.50">cor..</text></g><g><title>[unknown] (7,501,823 samples, 1.94%)</title><rect x="8.2607%" y="933" width="1.9351%" height="15" fill="rgb(215,21,27)" fg:x="32025124" fg:w="7501823"/><text x="8.5107%" y="943.50">[..</text></g><g><title>core::ptr::write (2,765,778 samples, 0.71%)</title><rect x="10.1958%" y="1109" width="0.7134%" height="15" fill="rgb(232,23,21)" fg:x="39526947" fg:w="2765778"/><text x="10.4458%" y="1119.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1,837,069 samples, 0.47%)</title><rect x="12.0778%" y="869" width="0.4739%" height="15" fill="rgb(244,5,23)" fg:x="46822983" fg:w="1837069"/><text x="12.3278%" y="879.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,837,069 samples, 0.47%)</title><rect x="12.0778%" y="853" width="0.4739%" height="15" fill="rgb(226,81,46)" fg:x="46822983" fg:w="1837069"/><text x="12.3278%" y="863.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (570,413 samples, 0.15%)</title><rect x="12.5517%" y="853" width="0.1471%" height="15" fill="rgb(247,70,30)" fg:x="48660052" fg:w="570413"/><text x="12.8017%" y="863.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (570,413 samples, 0.15%)</title><rect x="12.5517%" y="837" width="0.1471%" height="15" fill="rgb(212,68,19)" fg:x="48660052" fg:w="570413"/><text x="12.8017%" y="847.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (570,413 samples, 0.15%)</title><rect x="12.5517%" y="821" width="0.1471%" height="15" fill="rgb(240,187,13)" fg:x="48660052" fg:w="570413"/><text x="12.8017%" y="831.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (570,413 samples, 0.15%)</title><rect x="12.5517%" y="805" width="0.1471%" height="15" fill="rgb(223,113,26)" fg:x="48660052" fg:w="570413"/><text x="12.8017%" y="815.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (2,083,003 samples, 0.54%)</title><rect x="12.6988%" y="853" width="0.5373%" height="15" fill="rgb(206,192,2)" fg:x="49230465" fg:w="2083003"/><text x="12.9488%" y="863.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (2,083,003 samples, 0.54%)</title><rect x="12.6988%" y="837" width="0.5373%" height="15" fill="rgb(241,108,4)" fg:x="49230465" fg:w="2083003"/><text x="12.9488%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (2,083,003 samples, 0.54%)</title><rect x="12.6988%" y="821" width="0.5373%" height="15" fill="rgb(247,173,49)" fg:x="49230465" fg:w="2083003"/><text x="12.9488%" y="831.50"></text></g><g><title>rand::rng::Rng::random (9,522,247 samples, 2.46%)</title><rect x="10.9092%" y="1093" width="2.4562%" height="15" fill="rgb(224,114,35)" fg:x="42292725" fg:w="9522247"/><text x="11.1592%" y="1103.50">ra..</text></g><g><title>rand::distr::float::&lt;impl rand::distr::distribution::Distribution&lt;f64&gt; for rand::distr::StandardUniform&gt;::sample (9,522,247 samples, 2.46%)</title><rect x="10.9092%" y="1077" width="2.4562%" height="15" fill="rgb(245,159,27)" fg:x="42292725" fg:w="9522247"/><text x="11.1592%" y="1087.50">ra..</text></g><g><title>rand::rng::Rng::random (6,960,096 samples, 1.80%)</title><rect x="11.5701%" y="1061" width="1.7953%" height="15" fill="rgb(245,172,44)" fg:x="44854876" fg:w="6960096"/><text x="11.8201%" y="1071.50">r..</text></g><g><title>rand::distr::integer::&lt;impl rand::distr::distribution::Distribution&lt;u64&gt; for rand::distr::StandardUniform&gt;::sample (6,960,096 samples, 1.80%)</title><rect x="11.5701%" y="1045" width="1.7953%" height="15" fill="rgb(236,23,11)" fg:x="44854876" fg:w="6960096"/><text x="11.8201%" y="1055.50">r..</text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u64 (6,960,096 samples, 1.80%)</title><rect x="11.5701%" y="1029" width="1.7953%" height="15" fill="rgb(205,117,38)" fg:x="44854876" fg:w="6960096"/><text x="11.8201%" y="1039.50">&lt;..</text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u64 (6,960,096 samples, 1.80%)</title><rect x="11.5701%" y="1013" width="1.7953%" height="15" fill="rgb(237,72,25)" fg:x="44854876" fg:w="6960096"/><text x="11.8201%" y="1023.50">&lt;..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (6,960,096 samples, 1.80%)</title><rect x="11.5701%" y="997" width="1.7953%" height="15" fill="rgb(244,70,9)" fg:x="44854876" fg:w="6960096"/><text x="11.8201%" y="1007.50">&lt;..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="981" width="1.2877%" height="15" fill="rgb(217,125,39)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="991.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="965" width="1.2877%" height="15" fill="rgb(235,36,10)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="975.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="949" width="1.2877%" height="15" fill="rgb(251,123,47)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="959.50"></text></g><g><title>rand_chacha::guts::refill_wide (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="933" width="1.2877%" height="15" fill="rgb(221,13,13)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="943.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="917" width="1.2877%" height="15" fill="rgb(238,131,9)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="927.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="901" width="1.2877%" height="15" fill="rgb(211,50,8)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="911.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (4,991,989 samples, 1.29%)</title><rect x="12.0778%" y="885" width="1.2877%" height="15" fill="rgb(245,182,24)" fg:x="46822983" fg:w="4991989"/><text x="12.3278%" y="895.50"></text></g><g><title>rand_chacha::guts::round (3,154,920 samples, 0.81%)</title><rect x="12.5517%" y="869" width="0.8138%" height="15" fill="rgb(242,14,37)" fg:x="48660052" fg:w="3154920"/><text x="12.8017%" y="879.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (501,504 samples, 0.13%)</title><rect x="13.2361%" y="853" width="0.1294%" height="15" fill="rgb(246,228,12)" fg:x="51313468" fg:w="501504"/><text x="13.4861%" y="863.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (501,504 samples, 0.13%)</title><rect x="13.2361%" y="837" width="0.1294%" height="15" fill="rgb(213,55,15)" fg:x="51313468" fg:w="501504"/><text x="13.4861%" y="847.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (501,504 samples, 0.13%)</title><rect x="13.2361%" y="821" width="0.1294%" height="15" fill="rgb(209,9,3)" fg:x="51313468" fg:w="501504"/><text x="13.4861%" y="831.50"></text></g><g><title>ndarray::impl_constructors::&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::from_shape_fn (14,437,514 samples, 3.72%)</title><rect x="10.1958%" y="1173" width="3.7241%" height="15" fill="rgb(230,59,30)" fg:x="39526947" fg:w="14437514"/><text x="10.4458%" y="1183.50">ndar..</text></g><g><title>ndarray::iterators::to_vec_mapped (14,437,514 samples, 3.72%)</title><rect x="10.1958%" y="1157" width="3.7241%" height="15" fill="rgb(209,121,21)" fg:x="39526947" fg:w="14437514"/><text x="10.4458%" y="1167.50">ndar..</text></g><g><title>&lt;ndarray::indexes::IndicesIter&lt;D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14,437,514 samples, 3.72%)</title><rect x="10.1958%" y="1141" width="3.7241%" height="15" fill="rgb(220,109,13)" fg:x="39526947" fg:w="14437514"/><text x="10.4458%" y="1151.50">&lt;nda..</text></g><g><title>ndarray::iterators::to_vec_mapped::_{{closure}} (14,437,514 samples, 3.72%)</title><rect x="10.1958%" y="1125" width="3.7241%" height="15" fill="rgb(232,18,1)" fg:x="39526947" fg:w="14437514"/><text x="10.4458%" y="1135.50">ndar..</text></g><g><title>profile::main::_{{closure}} (11,671,736 samples, 3.01%)</title><rect x="10.9092%" y="1109" width="3.0107%" height="15" fill="rgb(215,41,42)" fg:x="42292725" fg:w="11671736"/><text x="11.1592%" y="1119.50">pro..</text></g><g><title>rand::rng::Rng::random_range (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1093" width="0.5545%" height="15" fill="rgb(224,123,36)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1103.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distr::uniform::SampleRange&lt;T&gt;&gt;::sample_single (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1077" width="0.5545%" height="15" fill="rgb(240,125,3)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1087.50"></text></g><g><title>&lt;rand::distr::uniform::int::UniformUsize as rand::distr::uniform::UniformSampler&gt;::sample_single (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1061" width="0.5545%" height="15" fill="rgb(205,98,50)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1071.50"></text></g><g><title>&lt;rand::distr::uniform::int::UniformInt&lt;u32&gt; as rand::distr::uniform::UniformSampler&gt;::sample_single (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1045" width="0.5545%" height="15" fill="rgb(205,185,37)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1055.50"></text></g><g><title>&lt;rand::distr::uniform::int::UniformInt&lt;u32&gt; as rand::distr::uniform::UniformSampler&gt;::sample_single_inclusive (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1029" width="0.5545%" height="15" fill="rgb(238,207,15)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1039.50"></text></g><g><title>rand::rng::Rng::random (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="1013" width="0.5545%" height="15" fill="rgb(213,199,42)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1023.50"></text></g><g><title>rand::distr::integer::&lt;impl rand::distr::distribution::Distribution&lt;u32&gt; for rand::distr::StandardUniform&gt;::sample (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="997" width="0.5545%" height="15" fill="rgb(235,201,11)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="1007.50"></text></g><g><title>&lt;rand::rngs::std::StdRng as rand_core::RngCore&gt;::next_u32 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="981" width="0.5545%" height="15" fill="rgb(207,46,11)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="991.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Rng as rand_core::RngCore&gt;::next_u32 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="965" width="0.5545%" height="15" fill="rgb(241,35,35)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="975.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="949" width="0.5545%" height="15" fill="rgb(243,32,47)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="959.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="933" width="0.5545%" height="15" fill="rgb(247,202,23)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="943.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="917" width="0.5545%" height="15" fill="rgb(219,102,11)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="927.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="901" width="0.5545%" height="15" fill="rgb(243,110,44)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="911.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="885" width="0.5545%" height="15" fill="rgb(222,74,54)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="895.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="869" width="0.5545%" height="15" fill="rgb(216,99,12)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="879.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="853" width="0.5545%" height="15" fill="rgb(226,22,26)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="863.50"></text></g><g><title>rand_chacha::guts::round (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="837" width="0.5545%" height="15" fill="rgb(217,163,10)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="847.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="821" width="0.5545%" height="15" fill="rgb(213,25,53)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="831.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="805" width="0.5545%" height="15" fill="rgb(252,105,26)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="815.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="789" width="0.5545%" height="15" fill="rgb(220,39,43)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (2,149,489 samples, 0.55%)</title><rect x="13.3654%" y="773" width="0.5545%" height="15" fill="rgb(229,68,48)" fg:x="51814972" fg:w="2149489"/><text x="13.6154%" y="783.50"></text></g><g><title>[libc.so.6] (1,405,588 samples, 0.36%)</title><rect x="14.3092%" y="629" width="0.3626%" height="15" fill="rgb(252,8,32)" fg:x="55473781" fg:w="1405588"/><text x="14.5592%" y="639.50"></text></g><g><title>[unknown] (1,405,588 samples, 0.36%)</title><rect x="14.3092%" y="613" width="0.3626%" height="15" fill="rgb(223,20,43)" fg:x="55473781" fg:w="1405588"/><text x="14.5592%" y="623.50"></text></g><g><title>core::array::_&lt;impl core::default::Default for [T: 4]&gt;::default (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="741" width="1.0480%" height="15" fill="rgb(229,81,49)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="751.50"></text></g><g><title>&lt;pprof::collector::Entry&lt;T&gt; as core::default::Default&gt;::default (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="725" width="1.0480%" height="15" fill="rgb(236,28,36)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="735.50"></text></g><g><title>&lt;pprof::frames::UnresolvedFrames as core::default::Default&gt;::default (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="709" width="1.0480%" height="15" fill="rgb(249,185,26)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="719.50"></text></g><g><title>std::time::SystemTime::now (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="693" width="1.0480%" height="15" fill="rgb(249,174,33)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="703.50"></text></g><g><title>std::sys::pal::unix::time::SystemTime::now (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="677" width="1.0480%" height="15" fill="rgb(233,201,37)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="687.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (4,062,711 samples, 1.05%)</title><rect x="13.9199%" y="661" width="1.0480%" height="15" fill="rgb(221,78,26)" fg:x="53964461" fg:w="4062711"/><text x="14.1699%" y="671.50"></text></g><g><title>clock_gettime (2,553,391 samples, 0.66%)</title><rect x="14.3092%" y="645" width="0.6586%" height="15" fill="rgb(250,127,30)" fg:x="55473781" fg:w="2553391"/><text x="14.5592%" y="655.50"></text></g><g><title>__vdso_clock_gettime (1,147,803 samples, 0.30%)</title><rect x="14.6718%" y="629" width="0.2961%" height="15" fill="rgb(230,49,44)" fg:x="56879369" fg:w="1147803"/><text x="14.9218%" y="639.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1125" width="3.4164%" height="15" fill="rgb(229,67,23)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1135.50">&lt;on..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1109" width="3.4164%" height="15" fill="rgb(249,83,47)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1119.50">onc..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1093" width="3.4164%" height="15" fill="rgb(215,43,3)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1103.50">onc..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1077" width="3.4164%" height="15" fill="rgb(238,154,13)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1087.50">onc..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1061" width="3.4164%" height="15" fill="rgb(219,56,2)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1071.50">onc..</text></g><g><title>once_cell::imp::initialize_or_wait (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1045" width="3.4164%" height="15" fill="rgb(233,0,4)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1055.50">onc..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1029" width="3.4164%" height="15" fill="rgb(235,30,7)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1039.50">cor..</text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="1013" width="3.4164%" height="15" fill="rgb(250,79,13)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1023.50">onc..</text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="997" width="3.4164%" height="15" fill="rgb(211,146,34)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="1007.50">onc..</text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="981" width="3.4164%" height="15" fill="rgb(228,22,38)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="991.50">onc..</text></g><g><title>core::ops::function::FnOnce::call_once (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="965" width="3.4164%" height="15" fill="rgb(235,168,5)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="975.50">cor..</text></g><g><title>core::ops::function::FnOnce::call_once (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="949" width="3.4164%" height="15" fill="rgb(221,155,16)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="959.50">cor..</text></g><g><title>pprof::profiler::PROFILER::_{{closure}} (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="933" width="3.4164%" height="15" fill="rgb(215,215,53)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="943.50">ppr..</text></g><g><title>pprof::profiler::Profiler::new (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="917" width="3.4164%" height="15" fill="rgb(223,4,10)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="927.50">ppr..</text></g><g><title>pprof::collector::Collector&lt;T&gt;::new (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="901" width="3.4164%" height="15" fill="rgb(234,103,6)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="911.50">ppr..</text></g><g><title>&lt;pprof::collector::HashCounter&lt;T&gt; as core::default::Default&gt;::default (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="885" width="3.4164%" height="15" fill="rgb(227,97,0)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="895.50">&lt;pp..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="869" width="3.4164%" height="15" fill="rgb(234,150,53)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="879.50">all..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="853" width="3.4164%" height="15" fill="rgb(228,201,54)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="863.50">all..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="837" width="3.4164%" height="15" fill="rgb(222,22,37)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="847.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="821" width="3.4164%" height="15" fill="rgb(237,53,32)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="831.50">&lt;co..</text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="805" width="3.4164%" height="15" fill="rgb(233,25,53)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="815.50">&lt;co..</text></g><g><title>core::ops::function::FnMut::call_mut (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="789" width="3.4164%" height="15" fill="rgb(210,40,34)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="799.50">cor..</text></g><g><title>&lt;pprof::collector::Bucket&lt;T&gt; as core::default::Default&gt;::default (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="773" width="3.4164%" height="15" fill="rgb(241,220,44)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="783.50">&lt;pp..</text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::default::Default&gt;::default (13,244,789 samples, 3.42%)</title><rect x="13.9199%" y="757" width="3.4164%" height="15" fill="rgb(235,28,35)" fg:x="53964461" fg:w="13244789"/><text x="14.1699%" y="767.50">&lt;al..</text></g><g><title>core::ptr::write (9,182,078 samples, 2.37%)</title><rect x="14.9679%" y="741" width="2.3685%" height="15" fill="rgb(210,56,17)" fg:x="58027172" fg:w="9182078"/><text x="15.2179%" y="751.50">co..</text></g><g><title>[unknown] (5,698,378 samples, 1.47%)</title><rect x="15.8665%" y="725" width="1.4699%" height="15" fill="rgb(224,130,29)" fg:x="61510872" fg:w="5698378"/><text x="16.1165%" y="735.50"></text></g><g><title>gimli::read::abbrev::AttributeSpecification::parse (1,803,574 samples, 0.47%)</title><rect x="17.7562%" y="677" width="0.4652%" height="15" fill="rgb(235,212,8)" fg:x="68837033" fg:w="1803574"/><text x="18.0062%" y="687.50"></text></g><g><title>gimli::read::reader::Reader::read_uleb128_u16 (1,803,574 samples, 0.47%)</title><rect x="17.7562%" y="661" width="0.4652%" height="15" fill="rgb(223,33,50)" fg:x="68837033" fg:w="1803574"/><text x="18.0062%" y="671.50"></text></g><g><title>gimli::leb128::read::u16 (1,803,574 samples, 0.47%)</title><rect x="17.7562%" y="645" width="0.4652%" height="15" fill="rgb(219,149,13)" fg:x="68837033" fg:w="1803574"/><text x="18.0062%" y="655.50"></text></g><g><title>gimli::leb128::low_bits_of_byte (1,803,574 samples, 0.47%)</title><rect x="17.7562%" y="629" width="0.4652%" height="15" fill="rgb(250,156,29)" fg:x="68837033" fg:w="1803574"/><text x="18.0062%" y="639.50"></text></g><g><title>gimli::read::dwarf::Dwarf&lt;R&gt;::abbreviations (4,939,246 samples, 1.27%)</title><rect x="17.3363%" y="773" width="1.2741%" height="15" fill="rgb(216,193,19)" fg:x="67209250" fg:w="4939246"/><text x="17.5863%" y="783.50"></text></g><g><title>gimli::read::abbrev::AbbreviationsCache::get (4,939,246 samples, 1.27%)</title><rect x="17.3363%" y="757" width="1.2741%" height="15" fill="rgb(216,135,14)" fg:x="67209250" fg:w="4939246"/><text x="17.5863%" y="767.50"></text></g><g><title>gimli::read::abbrev::DebugAbbrev&lt;R&gt;::abbreviations (4,939,246 samples, 1.27%)</title><rect x="17.3363%" y="741" width="1.2741%" height="15" fill="rgb(241,47,5)" fg:x="67209250" fg:w="4939246"/><text x="17.5863%" y="751.50"></text></g><g><title>gimli::read::abbrev::Abbreviations::parse (4,939,246 samples, 1.27%)</title><rect x="17.3363%" y="725" width="1.2741%" height="15" fill="rgb(233,42,35)" fg:x="67209250" fg:w="4939246"/><text x="17.5863%" y="735.50"></text></g><g><title>gimli::read::abbrev::Abbreviation::parse (3,311,463 samples, 0.85%)</title><rect x="17.7562%" y="709" width="0.8542%" height="15" fill="rgb(231,13,6)" fg:x="68837033" fg:w="3311463"/><text x="18.0062%" y="719.50"></text></g><g><title>gimli::read::abbrev::Abbreviation::parse_attributes (3,311,463 samples, 0.85%)</title><rect x="17.7562%" y="693" width="0.8542%" height="15" fill="rgb(207,181,40)" fg:x="68837033" fg:w="3311463"/><text x="18.0062%" y="703.50"></text></g><g><title>gimli::read::abbrev::Attributes::push (1,507,889 samples, 0.39%)</title><rect x="18.2214%" y="677" width="0.3890%" height="15" fill="rgb(254,173,49)" fg:x="70640607" fg:w="1507889"/><text x="18.4714%" y="687.50"></text></g><g><title>backtrace::symbolize::gimli::Cache::mapping_for_lib (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="949" width="1.7920%" height="15" fill="rgb(221,1,38)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="959.50">b..</text></g><g><title>backtrace::symbolize::gimli::create_mapping (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="933" width="1.7920%" height="15" fill="rgb(206,124,46)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="943.50">b..</text></g><g><title>backtrace::symbolize::gimli::elf::&lt;impl backtrace::symbolize::gimli::Mapping&gt;::new (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="917" width="1.7920%" height="15" fill="rgb(249,21,11)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="927.50">b..</text></g><g><title>backtrace::symbolize::gimli::Mapping::mk_or_other (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="901" width="1.7920%" height="15" fill="rgb(222,201,40)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="911.50">b..</text></g><g><title>backtrace::symbolize::gimli::elf::_&lt;impl backtrace::symbolize::gimli::Mapping&gt;::new::_{{closure}} (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="885" width="1.7920%" height="15" fill="rgb(235,61,29)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="895.50">b..</text></g><g><title>backtrace::symbolize::gimli::Context::new (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="869" width="1.7920%" height="15" fill="rgb(219,207,3)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="879.50">b..</text></g><g><title>addr2line::Context&lt;R&gt;::from_dwarf (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="853" width="1.7920%" height="15" fill="rgb(222,56,46)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="863.50">a..</text></g><g><title>addr2line::Context&lt;R&gt;::from_arc_dwarf (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="837" width="1.7920%" height="15" fill="rgb(239,76,54)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="847.50">a..</text></g><g><title>addr2line::unit::ResUnits&lt;R&gt;::parse (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="821" width="1.7920%" height="15" fill="rgb(231,124,27)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="831.50">a..</text></g><g><title>gimli::read::dwarf::Dwarf&lt;R&gt;::unit (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="805" width="1.7920%" height="15" fill="rgb(249,195,6)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="815.50">g..</text></g><g><title>gimli::read::dwarf::Unit&lt;R&gt;::new (6,947,228 samples, 1.79%)</title><rect x="17.3363%" y="789" width="1.7920%" height="15" fill="rgb(237,174,47)" fg:x="67209250" fg:w="6947228"/><text x="17.5863%" y="799.50">g..</text></g><g><title>gimli::read::dwarf::Unit&lt;R&gt;::new_with_abbreviations (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="773" width="0.5180%" height="15" fill="rgb(206,201,31)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="783.50"></text></g><g><title>gimli::read::line::DebugLine&lt;R&gt;::program (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="757" width="0.5180%" height="15" fill="rgb(231,57,52)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="767.50"></text></g><g><title>gimli::read::line::LineProgramHeader&lt;R,Offset&gt;::parse (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="741" width="0.5180%" height="15" fill="rgb(248,177,22)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="751.50"></text></g><g><title>gimli::read::reader::Reader::read_null_terminated_slice (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="725" width="0.5180%" height="15" fill="rgb(215,211,37)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="735.50"></text></g><g><title>&lt;gimli::read::endian_slice::EndianSlice&lt;Endian&gt; as gimli::read::reader::Reader&gt;::find (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="709" width="0.5180%" height="15" fill="rgb(241,128,51)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="719.50"></text></g><g><title>gimli::read::endian_slice::EndianSlice&lt;Endian&gt;::find (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="693" width="0.5180%" height="15" fill="rgb(227,165,31)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="677" width="0.5180%" height="15" fill="rgb(228,167,24)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="687.50"></text></g><g><title>gimli::read::endian_slice::EndianSlice&lt;Endian&gt;::find::_{{closure}} (2,007,982 samples, 0.52%)</title><rect x="18.6104%" y="661" width="0.5180%" height="15" fill="rgb(228,143,12)" fg:x="72148496" fg:w="2007982"/><text x="18.8604%" y="671.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="805" width="0.6555%" height="15" fill="rgb(249,149,8)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="815.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="789" width="0.6555%" height="15" fill="rgb(243,35,44)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="799.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="773" width="0.6555%" height="15" fill="rgb(246,89,9)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="783.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="757" width="0.6555%" height="15" fill="rgb(233,213,13)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="767.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="741" width="0.6555%" height="15" fill="rgb(233,141,41)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="751.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="725" width="0.6555%" height="15" fill="rgb(239,167,4)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="735.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="709" width="0.6555%" height="15" fill="rgb(209,217,16)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="719.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="693" width="0.6555%" height="15" fill="rgb(219,88,35)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="703.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="677" width="0.6555%" height="15" fill="rgb(220,193,23)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="687.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="661" width="0.6555%" height="15" fill="rgb(230,90,52)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="671.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="645" width="0.6555%" height="15" fill="rgb(252,106,19)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="655.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="629" width="0.6555%" height="15" fill="rgb(206,74,20)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="639.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="613" width="0.6555%" height="15" fill="rgb(230,138,44)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="623.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="597" width="0.6555%" height="15" fill="rgb(235,182,43)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="607.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="581" width="0.6555%" height="15" fill="rgb(242,16,51)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="591.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="565" width="0.6555%" height="15" fill="rgb(248,9,4)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="575.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="549" width="0.6555%" height="15" fill="rgb(210,31,22)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="559.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="533" width="0.6555%" height="15" fill="rgb(239,54,39)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="543.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="517" width="0.6555%" height="15" fill="rgb(230,99,41)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="527.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="501" width="0.6555%" height="15" fill="rgb(253,106,12)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="511.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="485" width="0.6555%" height="15" fill="rgb(213,46,41)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="495.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="469" width="0.6555%" height="15" fill="rgb(215,133,35)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="479.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="453" width="0.6555%" height="15" fill="rgb(213,28,5)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="463.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="437" width="0.6555%" height="15" fill="rgb(215,77,49)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="447.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="421" width="0.6555%" height="15" fill="rgb(248,100,22)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="431.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="405" width="0.6555%" height="15" fill="rgb(208,67,9)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="415.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="389" width="0.6555%" height="15" fill="rgb(219,133,21)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="399.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (2,541,054 samples, 0.66%)</title><rect x="19.1283%" y="373" width="0.6555%" height="15" fill="rgb(246,46,29)" fg:x="74156478" fg:w="2541054"/><text x="19.3783%" y="383.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="357" width="0.3356%" height="15" fill="rgb(246,185,52)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="367.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="341" width="0.3356%" height="15" fill="rgb(252,136,11)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="351.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="325" width="0.3356%" height="15" fill="rgb(219,138,53)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="335.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="309" width="0.3356%" height="15" fill="rgb(211,51,23)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="319.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="293" width="0.3356%" height="15" fill="rgb(247,221,28)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="303.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="277" width="0.3356%" height="15" fill="rgb(251,222,45)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="287.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="261" width="0.3356%" height="15" fill="rgb(217,162,53)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="271.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="245" width="0.3356%" height="15" fill="rgb(229,93,14)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="255.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="229" width="0.3356%" height="15" fill="rgb(209,67,49)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="239.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="213" width="0.3356%" height="15" fill="rgb(213,87,29)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="223.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="197" width="0.3356%" height="15" fill="rgb(205,151,52)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="207.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="181" width="0.3356%" height="15" fill="rgb(253,215,39)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="191.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="165" width="0.3356%" height="15" fill="rgb(221,220,41)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="175.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="149" width="0.3356%" height="15" fill="rgb(218,133,21)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="159.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="133" width="0.3356%" height="15" fill="rgb(221,193,43)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="143.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="117" width="0.3356%" height="15" fill="rgb(240,128,52)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="127.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse_children (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="101" width="0.3356%" height="15" fill="rgb(253,114,12)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="111.50"></text></g><g><title>addr2line::function::InlinedFunction&lt;R&gt;::parse (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="85" width="0.3356%" height="15" fill="rgb(215,223,47)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="95.50"></text></g><g><title>addr2line::function::name_attr (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="69" width="0.3356%" height="15" fill="rgb(248,225,23)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="79.50"></text></g><g><title>addr2line::Context&lt;R&gt;::find_unit (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="53" width="0.3356%" height="15" fill="rgb(250,108,0)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="63.50"></text></g><g><title>addr2line::unit::ResUnits&lt;R&gt;::find_offset (1,301,194 samples, 0.34%)</title><rect x="19.4482%" y="37" width="0.3356%" height="15" fill="rgb(228,208,7)" fg:x="75396338" fg:w="1301194"/><text x="19.6982%" y="47.50"></text></g><g><title>addr2line::function::LazyFunction&lt;R&gt;::borrow (3,701,209 samples, 0.95%)</title><rect x="19.1283%" y="869" width="0.9547%" height="15" fill="rgb(244,45,10)" fg:x="74156478" fg:w="3701209"/><text x="19.3783%" y="879.50"></text></g><g><title>addr2line::lazy::LazyCell&lt;T&gt;::borrow_with (3,701,209 samples, 0.95%)</title><rect x="19.1283%" y="853" width="0.9547%" height="15" fill="rgb(207,125,25)" fg:x="74156478" fg:w="3701209"/><text x="19.3783%" y="863.50"></text></g><g><title>addr2line::function::LazyFunction&lt;R&gt;::borrow::_{{closure}} (3,701,209 samples, 0.95%)</title><rect x="19.1283%" y="837" width="0.9547%" height="15" fill="rgb(210,195,18)" fg:x="74156478" fg:w="3701209"/><text x="19.3783%" y="847.50"></text></g><g><title>addr2line::function::Function&lt;R&gt;::parse (3,701,209 samples, 0.95%)</title><rect x="19.1283%" y="821" width="0.9547%" height="15" fill="rgb(249,80,12)" fg:x="74156478" fg:w="3701209"/><text x="19.3783%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::sort_by (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="805" width="0.2993%" height="15" fill="rgb(221,65,9)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="815.50"></text></g><g><title>alloc::slice::stable_sort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="789" width="0.2993%" height="15" fill="rgb(235,49,36)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="799.50"></text></g><g><title>core::slice::sort::stable::sort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="773" width="0.2993%" height="15" fill="rgb(225,32,20)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="783.50"></text></g><g><title>core::slice::sort::stable::driftsort_main (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="757" width="0.2993%" height="15" fill="rgb(215,141,46)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="767.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="741" width="0.2993%" height="15" fill="rgb(250,160,47)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="751.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="725" width="0.2993%" height="15" fill="rgb(216,222,40)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="735.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="709" width="0.2993%" height="15" fill="rgb(234,217,39)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="719.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="693" width="0.2993%" height="15" fill="rgb(207,178,40)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="703.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="677" width="0.2993%" height="15" fill="rgb(221,136,13)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="687.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="661" width="0.2993%" height="15" fill="rgb(249,199,10)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="671.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="645" width="0.2993%" height="15" fill="rgb(249,222,13)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="655.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="629" width="0.2993%" height="15" fill="rgb(244,185,38)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="639.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="613" width="0.2993%" height="15" fill="rgb(236,202,9)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="623.50"></text></g><g><title>core::slice::sort::stable::quicksort::quicksort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="597" width="0.2993%" height="15" fill="rgb(250,229,37)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="607.50"></text></g><g><title>&lt;T as core::slice::sort::shared::smallsort::StableSmallSortTypeImpl&gt;::small_sort (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="581" width="0.2993%" height="15" fill="rgb(206,174,23)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="591.50"></text></g><g><title>core::slice::sort::shared::smallsort::small_sort_general_with_scratch (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="565" width="0.2993%" height="15" fill="rgb(211,33,43)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="575.50"></text></g><g><title>core::slice::sort::shared::smallsort::sort4_stable (1,160,155 samples, 0.30%)</title><rect x="19.7838%" y="549" width="0.2993%" height="15" fill="rgb(245,58,50)" fg:x="76697532" fg:w="1160155"/><text x="20.0338%" y="559.50"></text></g><g><title>addr2line::function::LazyFunctions&lt;R&gt;::borrow (3,989,540 samples, 1.03%)</title><rect x="20.0831%" y="869" width="1.0291%" height="15" fill="rgb(244,68,36)" fg:x="77857687" fg:w="3989540"/><text x="20.3331%" y="879.50"></text></g><g><title>addr2line::lazy::LazyCell&lt;T&gt;::borrow_with (3,989,540 samples, 1.03%)</title><rect x="20.0831%" y="853" width="1.0291%" height="15" fill="rgb(232,229,15)" fg:x="77857687" fg:w="3989540"/><text x="20.3331%" y="863.50"></text></g><g><title>addr2line::function::LazyFunctions&lt;R&gt;::borrow::_{{closure}} (3,989,540 samples, 1.03%)</title><rect x="20.0831%" y="837" width="1.0291%" height="15" fill="rgb(254,30,23)" fg:x="77857687" fg:w="3989540"/><text x="20.3331%" y="847.50"></text></g><g><title>addr2line::function::Functions&lt;R&gt;::parse (3,989,540 samples, 1.03%)</title><rect x="20.0831%" y="821" width="1.0291%" height="15" fill="rgb(235,160,14)" fg:x="77857687" fg:w="3989540"/><text x="20.3331%" y="831.50"></text></g><g><title>gimli::read::unit::EntriesRaw&lt;R&gt;::read_abbreviation (3,989,540 samples, 1.03%)</title><rect x="20.0831%" y="805" width="1.0291%" height="15" fill="rgb(212,155,44)" fg:x="77857687" fg:w="3989540"/><text x="20.3331%" y="815.50"></text></g><g><title>gimli::read::reader::Reader::read_uleb128 (2,690,581 samples, 0.69%)</title><rect x="20.4181%" y="789" width="0.6940%" height="15" fill="rgb(226,2,50)" fg:x="79156646" fg:w="2690581"/><text x="20.6681%" y="799.50"></text></g><g><title>gimli::leb128::read::unsigned (2,690,581 samples, 0.69%)</title><rect x="20.4181%" y="773" width="0.6940%" height="15" fill="rgb(234,177,6)" fg:x="79156646" fg:w="2690581"/><text x="20.6681%" y="783.50"></text></g><g><title>gimli::read::reader::Reader::read_u8 (1,401,589 samples, 0.36%)</title><rect x="20.7506%" y="757" width="0.3615%" height="15" fill="rgb(217,24,9)" fg:x="80445638" fg:w="1401589"/><text x="21.0006%" y="767.50"></text></g><g><title>gimli::read::reader::Reader::read_u8_array (1,401,589 samples, 0.36%)</title><rect x="20.7506%" y="741" width="0.3615%" height="15" fill="rgb(220,13,46)" fg:x="80445638" fg:w="1401589"/><text x="21.0006%" y="751.50"></text></g><g><title>&lt;gimli::read::endian_slice::EndianSlice&lt;Endian&gt; as gimli::read::reader::Reader&gt;::read_slice (1,401,589 samples, 0.36%)</title><rect x="20.7506%" y="725" width="0.3615%" height="15" fill="rgb(239,221,27)" fg:x="80445638" fg:w="1401589"/><text x="21.0006%" y="735.50"></text></g><g><title>gimli::read::endian_slice::EndianSlice&lt;Endian&gt;::read_slice (1,401,589 samples, 0.36%)</title><rect x="20.7506%" y="709" width="0.3615%" height="15" fill="rgb(222,198,25)" fg:x="80445638" fg:w="1401589"/><text x="21.0006%" y="719.50"></text></g><g><title>pprof::profiler::ProfilerGuard::new (29,440,349 samples, 7.59%)</title><rect x="13.9199%" y="1173" width="7.5940%" height="15" fill="rgb(211,99,13)" fg:x="53964461" fg:w="29440349"/><text x="14.1699%" y="1183.50">pprof::pro..</text></g><g><title>pprof::profiler::ProfilerGuardBuilder::build (29,440,349 samples, 7.59%)</title><rect x="13.9199%" y="1157" width="7.5940%" height="15" fill="rgb(232,111,31)" fg:x="53964461" fg:w="29440349"/><text x="14.1699%" y="1167.50">pprof::pro..</text></g><g><title>pprof::profiler::trigger_lazy (29,440,349 samples, 7.59%)</title><rect x="13.9199%" y="1141" width="7.5940%" height="15" fill="rgb(245,82,37)" fg:x="53964461" fg:w="29440349"/><text x="14.1699%" y="1151.50">pprof::pro..</text></g><g><title>backtrace::capture::Backtrace::new (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1125" width="4.1776%" height="15" fill="rgb(227,149,46)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1135.50">backt..</text></g><g><title>backtrace::capture::Backtrace::resolve (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1109" width="4.1776%" height="15" fill="rgb(218,36,50)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1119.50">backt..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1093" width="4.1776%" height="15" fill="rgb(226,80,48)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1103.50">&lt;core..</text></g><g><title>core::ops::function::FnMut::call_mut (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1077" width="4.1776%" height="15" fill="rgb(238,224,15)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1087.50">core:..</text></g><g><title>backtrace::capture::BacktraceFrame::resolve (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1061" width="4.1776%" height="15" fill="rgb(241,136,10)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1071.50">backt..</text></g><g><title>backtrace::capture::Frame::resolve_symbols (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1045" width="4.1776%" height="15" fill="rgb(208,32,45)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1055.50">backt..</text></g><g><title>backtrace::symbolize::resolve_frame (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1029" width="4.1776%" height="15" fill="rgb(207,135,9)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1039.50">backt..</text></g><g><title>backtrace::symbolize::resolve_frame_unsynchronized (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="1013" width="4.1776%" height="15" fill="rgb(206,86,44)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1023.50">backt..</text></g><g><title>backtrace::symbolize::gimli::resolve (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="997" width="4.1776%" height="15" fill="rgb(245,177,15)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="1007.50">backt..</text></g><g><title>backtrace::symbolize::gimli::Cache::with_global (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="981" width="4.1776%" height="15" fill="rgb(206,64,50)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="991.50">backt..</text></g><g><title>backtrace::symbolize::gimli::resolve::_{{closure}} (16,195,560 samples, 4.18%)</title><rect x="17.3363%" y="965" width="4.1776%" height="15" fill="rgb(234,36,40)" fg:x="67209250" fg:w="16195560"/><text x="17.5863%" y="975.50">backt..</text></g><g><title>backtrace::symbolize::gimli::Context::find_frames (9,248,332 samples, 2.39%)</title><rect x="19.1283%" y="949" width="2.3856%" height="15" fill="rgb(213,64,8)" fg:x="74156478" fg:w="9248332"/><text x="19.3783%" y="959.50">ba..</text></g><g><title>addr2line::Context&lt;R&gt;::find_frames (9,248,332 samples, 2.39%)</title><rect x="19.1283%" y="933" width="2.3856%" height="15" fill="rgb(210,75,36)" fg:x="74156478" fg:w="9248332"/><text x="19.3783%" y="943.50">ad..</text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::find_function_or_location (9,248,332 samples, 2.39%)</title><rect x="19.1283%" y="917" width="2.3856%" height="15" fill="rgb(229,88,21)" fg:x="74156478" fg:w="9248332"/><text x="19.3783%" y="927.50">ad..</text></g><g><title>addr2line::lookup::LookupResult&lt;L&gt;::map (9,248,332 samples, 2.39%)</title><rect x="19.1283%" y="901" width="2.3856%" height="15" fill="rgb(252,204,47)" fg:x="74156478" fg:w="9248332"/><text x="19.3783%" y="911.50">ad..</text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::find_function_or_location::_{{closure}} (9,248,332 samples, 2.39%)</title><rect x="19.1283%" y="885" width="2.3856%" height="15" fill="rgb(208,77,27)" fg:x="74156478" fg:w="9248332"/><text x="19.3783%" y="895.50">ad..</text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::find_location (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="869" width="0.4018%" height="15" fill="rgb(221,76,26)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="879.50"></text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::parse_lines (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="853" width="0.4018%" height="15" fill="rgb(225,139,18)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="863.50"></text></g><g><title>addr2line::line::LazyLines::borrow (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="837" width="0.4018%" height="15" fill="rgb(230,137,11)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="847.50"></text></g><g><title>addr2line::lazy::LazyCell&lt;T&gt;::borrow_with (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="821" width="0.4018%" height="15" fill="rgb(212,28,1)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="831.50"></text></g><g><title>addr2line::line::LazyLines::borrow::_{{closure}} (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="805" width="0.4018%" height="15" fill="rgb(248,164,17)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="815.50"></text></g><g><title>addr2line::line::Lines::parse (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="789" width="0.4018%" height="15" fill="rgb(222,171,42)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="773" width="0.4018%" height="15" fill="rgb(243,84,45)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1,557,583 samples, 0.40%)</title><rect x="21.1121%" y="757" width="0.4018%" height="15" fill="rgb(252,49,23)" fg:x="81847227" fg:w="1557583"/><text x="21.3621%" y="767.50"></text></g><g><title>pprof::report::ReportBuilder::build (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1173" width="1.0182%" height="15" fill="rgb(215,19,7)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1183.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1157" width="1.0182%" height="15" fill="rgb(238,81,41)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1141" width="1.0182%" height="15" fill="rgb(210,199,37)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1125" width="1.0182%" height="15" fill="rgb(244,192,49)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1135.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1109" width="1.0182%" height="15" fill="rgb(226,211,11)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1119.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1093" width="1.0182%" height="15" fill="rgb(236,162,54)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1103.50"></text></g><g><title>pprof::report::ReportBuilder::build::_{{closure}} (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1077" width="1.0182%" height="15" fill="rgb(220,229,9)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1087.50"></text></g><g><title>&lt;pprof::frames::Frames as core::convert::From&lt;pprof::frames::UnresolvedFrames&gt;&gt;::from (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1061" width="1.0182%" height="15" fill="rgb(250,87,22)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1071.50"></text></g><g><title>pprof::backtrace::backtrace_rs::&lt;impl pprof::backtrace::Frame for backtrace::backtrace::Frame&gt;::resolve_symbol (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1045" width="1.0182%" height="15" fill="rgb(239,43,17)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1055.50"></text></g><g><title>backtrace::symbolize::resolve_frame (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1029" width="1.0182%" height="15" fill="rgb(231,177,25)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1039.50"></text></g><g><title>backtrace::symbolize::resolve_frame_unsynchronized (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="1013" width="1.0182%" height="15" fill="rgb(219,179,1)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1023.50"></text></g><g><title>backtrace::symbolize::gimli::resolve (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="997" width="1.0182%" height="15" fill="rgb(238,219,53)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="1007.50"></text></g><g><title>backtrace::symbolize::gimli::Cache::with_global (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="981" width="1.0182%" height="15" fill="rgb(232,167,36)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="991.50"></text></g><g><title>backtrace::symbolize::gimli::resolve::_{{closure}} (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="965" width="1.0182%" height="15" fill="rgb(244,19,51)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="975.50"></text></g><g><title>backtrace::symbolize::gimli::Context::find_frames (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="949" width="1.0182%" height="15" fill="rgb(224,6,22)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="959.50"></text></g><g><title>addr2line::Context&lt;R&gt;::find_frames (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="933" width="1.0182%" height="15" fill="rgb(224,145,5)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="943.50"></text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::find_function_or_location (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="917" width="1.0182%" height="15" fill="rgb(234,130,49)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="927.50"></text></g><g><title>addr2line::lookup::LookupResult&lt;L&gt;::map (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="901" width="1.0182%" height="15" fill="rgb(254,6,2)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="911.50"></text></g><g><title>addr2line::unit::ResUnit&lt;R&gt;::find_function_or_location::_{{closure}} (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="885" width="1.0182%" height="15" fill="rgb(208,96,46)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="895.50"></text></g><g><title>addr2line::function::LazyFunctions&lt;R&gt;::borrow (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="869" width="1.0182%" height="15" fill="rgb(239,3,39)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="879.50"></text></g><g><title>addr2line::lazy::LazyCell&lt;T&gt;::borrow_with (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="853" width="1.0182%" height="15" fill="rgb(233,210,1)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="863.50"></text></g><g><title>addr2line::function::LazyFunctions&lt;R&gt;::borrow::_{{closure}} (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="837" width="1.0182%" height="15" fill="rgb(244,137,37)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="847.50"></text></g><g><title>addr2line::function::Functions&lt;R&gt;::parse (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="821" width="1.0182%" height="15" fill="rgb(240,136,2)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="831.50"></text></g><g><title>gimli::read::unit::EntriesRaw&lt;R&gt;::read_abbreviation (3,947,153 samples, 1.02%)</title><rect x="21.5139%" y="805" width="1.0182%" height="15" fill="rgb(239,18,37)" fg:x="83404810" fg:w="3947153"/><text x="21.7639%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1,737,559 samples, 0.45%)</title><rect x="22.5321%" y="1077" width="0.4482%" height="15" fill="rgb(218,185,22)" fg:x="87351963" fg:w="1737559"/><text x="22.7821%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3,250,897 samples, 0.84%)</title><rect x="22.5321%" y="1157" width="0.8386%" height="15" fill="rgb(225,218,4)" fg:x="87351963" fg:w="3250897"/><text x="22.7821%" y="1167.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3,250,897 samples, 0.84%)</title><rect x="22.5321%" y="1141" width="0.8386%" height="15" fill="rgb(230,182,32)" fg:x="87351963" fg:w="3250897"/><text x="22.7821%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,250,897 samples, 0.84%)</title><rect x="22.5321%" y="1125" width="0.8386%" height="15" fill="rgb(242,56,43)" fg:x="87351963" fg:w="3250897"/><text x="22.7821%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3,250,897 samples, 0.84%)</title><rect x="22.5321%" y="1109" width="0.8386%" height="15" fill="rgb(233,99,24)" fg:x="87351963" fg:w="3250897"/><text x="22.7821%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3,250,897 samples, 0.84%)</title><rect x="22.5321%" y="1093" width="0.8386%" height="15" fill="rgb(234,209,42)" fg:x="87351963" fg:w="3250897"/><text x="22.7821%" y="1103.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="1077" width="0.3904%" height="15" fill="rgb(227,7,12)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="1061" width="0.3904%" height="15" fill="rgb(245,203,43)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="1045" width="0.3904%" height="15" fill="rgb(238,205,33)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="1029" width="0.3904%" height="15" fill="rgb(231,56,7)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1039.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="1013" width="0.3904%" height="15" fill="rgb(244,186,29)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1023.50"></text></g><g><title>profile::demean_impl::_{{closure}} (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="997" width="0.3904%" height="15" fill="rgb(234,111,31)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="1007.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="981" width="0.3904%" height="15" fill="rgb(241,149,10)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="965" width="0.3904%" height="15" fill="rgb(249,206,44)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="949" width="0.3904%" height="15" fill="rgb(251,153,30)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="933" width="0.3904%" height="15" fill="rgb(239,152,38)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="917" width="0.3904%" height="15" fill="rgb(249,139,47)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="901" width="0.3904%" height="15" fill="rgb(244,64,35)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="885" width="0.3904%" height="15" fill="rgb(216,46,15)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="869" width="0.3904%" height="15" fill="rgb(250,74,19)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="853" width="0.3904%" height="15" fill="rgb(249,42,33)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="837" width="0.3904%" height="15" fill="rgb(242,149,17)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="821" width="0.3904%" height="15" fill="rgb(244,29,21)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="805" width="0.3904%" height="15" fill="rgb(220,130,37)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="815.50"></text></g><g><title>core::ptr::write (1,513,338 samples, 0.39%)</title><rect x="22.9803%" y="789" width="0.3904%" height="15" fill="rgb(211,67,2)" fg:x="89089522" fg:w="1513338"/><text x="23.2303%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (18,222,600 samples, 4.70%)</title><rect x="23.3706%" y="901" width="4.7004%" height="15" fill="rgb(235,68,52)" fg:x="90602860" fg:w="18222600"/><text x="23.6206%" y="911.50">core:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (18,222,600 samples, 4.70%)</title><rect x="23.3706%" y="885" width="4.7004%" height="15" fill="rgb(246,142,3)" fg:x="90602860" fg:w="18222600"/><text x="23.6206%" y="895.50">alloc..</text></g><g><title>core::ptr::write (18,222,600 samples, 4.70%)</title><rect x="23.3706%" y="869" width="4.7004%" height="15" fill="rgb(241,25,7)" fg:x="90602860" fg:w="18222600"/><text x="23.6206%" y="879.50">core:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="1061" width="5.4201%" height="15" fill="rgb(242,119,39)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="1071.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="1045" width="5.4201%" height="15" fill="rgb(241,98,45)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="1055.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="1029" width="5.4201%" height="15" fill="rgb(254,28,30)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="1039.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="1013" width="5.4201%" height="15" fill="rgb(241,142,54)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="1023.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="997" width="5.4201%" height="15" fill="rgb(222,85,15)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="1007.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="981" width="5.4201%" height="15" fill="rgb(210,85,47)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="991.50">alloc::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="965" width="5.4201%" height="15" fill="rgb(224,206,25)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="975.50">core::i..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="949" width="5.4201%" height="15" fill="rgb(243,201,19)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="959.50">&lt;core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="933" width="5.4201%" height="15" fill="rgb(236,59,4)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="943.50">core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (21,012,481 samples, 5.42%)</title><rect x="23.3706%" y="917" width="5.4201%" height="15" fill="rgb(254,179,45)" fg:x="90602860" fg:w="21012481"/><text x="23.6206%" y="927.50">core::i..</text></g><g><title>profile::demean_impl::_{{closure}}::_{{closure}} (2,789,881 samples, 0.72%)</title><rect x="28.0711%" y="901" width="0.7196%" height="15" fill="rgb(226,14,10)" fg:x="108825460" fg:w="2789881"/><text x="28.3211%" y="911.50"></text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (7,937,510 samples, 2.05%)</title><rect x="28.7907%" y="1061" width="2.0474%" height="15" fill="rgb(244,27,41)" fg:x="111615341" fg:w="7937510"/><text x="29.0407%" y="1071.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core (7,937,510 samples, 2.05%)</title><rect x="28.7907%" y="1045" width="2.0474%" height="15" fill="rgb(235,35,32)" fg:x="111615341" fg:w="7937510"/><text x="29.0407%" y="1055.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided (7,937,510 samples, 2.05%)</title><rect x="28.7907%" y="1029" width="2.0474%" height="15" fill="rgb(218,68,31)" fg:x="111615341" fg:w="7937510"/><text x="29.0407%" y="1039.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::for_each_core_strided_c (7,937,510 samples, 2.05%)</title><rect x="28.7907%" y="1013" width="2.0474%" height="15" fill="rgb(207,120,37)" fg:x="111615341" fg:w="7937510"/><text x="29.0407%" y="1023.50">n..</text></g><g><title>ndarray::zip::Zip&lt;P,D&gt;::inner (7,937,510 samples, 2.05%)</title><rect x="28.7907%" y="997" width="2.0474%" height="15" fill="rgb(227,98,0)" fg:x="111615341" fg:w="7937510"/><text x="29.0407%" y="1007.50">n..</text></g><g><title>ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each::_{{closure}} (3,953,821 samples, 1.02%)</title><rect x="29.8183%" y="981" width="1.0199%" height="15" fill="rgb(207,7,3)" fg:x="115599030" fg:w="3953821"/><text x="30.0683%" y="991.50"></text></g><g><title>profile::demean_impl::_{{closure}}::_{{closure}} (3,953,821 samples, 1.02%)</title><rect x="29.8183%" y="965" width="1.0199%" height="15" fill="rgb(206,98,19)" fg:x="115599030" fg:w="3953821"/><text x="30.0683%" y="975.50"></text></g><g><title>profile::internal::sad_converged (7,988,455 samples, 2.06%)</title><rect x="30.8381%" y="1061" width="2.0606%" height="15" fill="rgb(217,5,26)" fg:x="119552851" fg:w="7988455"/><text x="31.0881%" y="1071.50">p..</text></g><g><title>core::iter::traits::iterator::Iterator::all (7,988,455 samples, 2.06%)</title><rect x="30.8381%" y="1045" width="2.0606%" height="15" fill="rgb(235,190,38)" fg:x="119552851" fg:w="7988455"/><text x="31.0881%" y="1055.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7,988,455 samples, 2.06%)</title><rect x="30.8381%" y="1029" width="2.0606%" height="15" fill="rgb(247,86,24)" fg:x="119552851" fg:w="7988455"/><text x="31.0881%" y="1039.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (4,013,974 samples, 1.04%)</title><rect x="31.8633%" y="1013" width="1.0354%" height="15" fill="rgb(205,101,16)" fg:x="123527332" fg:w="4013974"/><text x="32.1133%" y="1023.50"></text></g><g><title>profile::internal::sad_converged::_{{closure}} (4,013,974 samples, 1.04%)</title><rect x="31.8633%" y="997" width="1.0354%" height="15" fill="rgb(246,168,33)" fg:x="123527332" fg:w="4013974"/><text x="32.1133%" y="1007.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (76,145,521 samples, 19.64%)</title><rect x="32.8987%" y="965" width="19.6414%" height="15" fill="rgb(231,114,1)" fg:x="127541306" fg:w="76145521"/><text x="33.1487%" y="975.50">&lt;usize as core::iter::range::St..</text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (76,145,521 samples, 19.64%)</title><rect x="32.8987%" y="949" width="19.6414%" height="15" fill="rgb(207,184,53)" fg:x="127541306" fg:w="76145521"/><text x="33.1487%" y="959.50">core::num::&lt;impl usize&gt;::unchec..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (79,530,376 samples, 20.51%)</title><rect x="32.8987%" y="997" width="20.5145%" height="15" fill="rgb(224,95,51)" fg:x="127541306" fg:w="79530376"/><text x="33.1487%" y="1007.50">core::iter::range::&lt;impl core::i..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (79,530,376 samples, 20.51%)</title><rect x="32.8987%" y="981" width="20.5145%" height="15" fill="rgb(212,188,45)" fg:x="127541306" fg:w="79530376"/><text x="33.1487%" y="991.50">&lt;core::ops::range::Range&lt;T&gt; as c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,384,855 samples, 0.87%)</title><rect x="52.5401%" y="965" width="0.8731%" height="15" fill="rgb(223,154,38)" fg:x="203686827" fg:w="3384855"/><text x="52.7901%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1157" width="74.9281%" height="15" fill="rgb(251,22,52)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1167.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1141" width="74.9281%" height="15" fill="rgb(229,209,22)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1151.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1125" width="74.9281%" height="15" fill="rgb(234,138,34)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1135.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1109" width="74.9281%" height="15" fill="rgb(212,95,11)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1119.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1093" width="74.9281%" height="15" fill="rgb(240,179,47)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1103.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>profile::demean_impl::_{{closure}} (290,480,066 samples, 74.93%)</title><rect x="23.3706%" y="1077" width="74.9281%" height="15" fill="rgb(240,163,11)" fg:x="90602860" fg:w="290480066"/><text x="23.6206%" y="1087.50">profile::demean_impl::_{{closure}}</text></g><g><title>profile::internal::subtract_weighted_group_mean (253,541,620 samples, 65.40%)</title><rect x="32.8987%" y="1061" width="65.4000%" height="15" fill="rgb(236,37,12)" fg:x="127541306" fg:w="253541620"/><text x="33.1487%" y="1071.50">profile::internal::subtract_weighted_group_mean</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (253,541,620 samples, 65.40%)</title><rect x="32.8987%" y="1045" width="65.4000%" height="15" fill="rgb(232,164,16)" fg:x="127541306" fg:w="253541620"/><text x="33.1487%" y="1055.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (253,541,620 samples, 65.40%)</title><rect x="32.8987%" y="1029" width="65.4000%" height="15" fill="rgb(244,205,15)" fg:x="127541306" fg:w="253541620"/><text x="33.1487%" y="1039.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (253,541,620 samples, 65.40%)</title><rect x="32.8987%" y="1013" width="65.4000%" height="15" fill="rgb(223,117,47)" fg:x="127541306" fg:w="253541620"/><text x="33.1487%" y="1023.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (174,011,244 samples, 44.89%)</title><rect x="53.4133%" y="997" width="44.8855%" height="15" fill="rgb(244,107,35)" fg:x="207071682" fg:w="174011244"/><text x="53.6633%" y="1007.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>profile::internal::subtract_weighted_group_mean::_{{closure}} (174,011,244 samples, 44.89%)</title><rect x="53.4133%" y="981" width="44.8855%" height="15" fill="rgb(205,140,8)" fg:x="207071682" fg:w="174011244"/><text x="53.6633%" y="991.50">profile::internal::subtract_weighted_group_mean::_{{closure}}</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (61,928,034 samples, 15.97%)</title><rect x="82.3246%" y="965" width="15.9741%" height="15" fill="rgb(228,84,46)" fg:x="319154892" fg:w="61928034"/><text x="82.5746%" y="975.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (61,928,034 samples, 15.97%)</title><rect x="82.3246%" y="949" width="15.9741%" height="15" fill="rgb(254,188,9)" fg:x="319154892" fg:w="61928034"/><text x="82.5746%" y="959.50">core::slice::index::&lt;impl..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (61,928,034 samples, 15.97%)</title><rect x="82.3246%" y="933" width="15.9741%" height="15" fill="rgb(206,112,54)" fg:x="319154892" fg:w="61928034"/><text x="82.5746%" y="943.50">&lt;usize as core::slice::in..</text></g><g><title>core::iter::traits::iterator::Iterator::max (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1157" width="0.5269%" height="15" fill="rgb(216,84,49)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1167.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1141" width="0.5269%" height="15" fill="rgb(214,194,35)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1151.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1125" width="0.5269%" height="15" fill="rgb(249,28,3)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1109" width="0.5269%" height="15" fill="rgb(222,56,52)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1093" width="0.5269%" height="15" fill="rgb(245,217,50)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1103.50"></text></g><g><title>&lt;ndarray::iterators::Iter&lt;A,D&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1077" width="0.5269%" height="15" fill="rgb(213,201,24)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1087.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,042,701 samples, 0.53%)</title><rect x="98.2987%" y="1061" width="0.5269%" height="15" fill="rgb(248,116,28)" fg:x="381082926" fg:w="2042701"/><text x="98.5487%" y="1071.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,496,553 samples, 0.39%)</title><rect x="98.4396%" y="1045" width="0.3860%" height="15" fill="rgb(219,72,43)" fg:x="381629074" fg:w="1496553"/><text x="98.6896%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (1,496,553 samples, 0.39%)</title><rect x="98.4396%" y="1029" width="0.3860%" height="15" fill="rgb(209,138,14)" fg:x="381629074" fg:w="1496553"/><text x="98.6896%" y="1039.50"></text></g><g><title>core::cmp::max_by (1,496,553 samples, 0.39%)</title><rect x="98.4396%" y="1013" width="0.3860%" height="15" fill="rgb(222,18,33)" fg:x="381629074" fg:w="1496553"/><text x="98.6896%" y="1023.50"></text></g><g><title>_start (361,945,408 samples, 93.36%)</title><rect x="5.8791%" y="1285" width="93.3623%" height="15" fill="rgb(213,199,7)" fg:x="22791879" fg:w="361945408"/><text x="6.1291%" y="1295.50">_start</text></g><g><title>__libc_start_main (361,945,408 samples, 93.36%)</title><rect x="5.8791%" y="1269" width="93.3623%" height="15" fill="rgb(250,110,10)" fg:x="22791879" fg:w="361945408"/><text x="6.1291%" y="1279.50">__libc_start_main</text></g><g><title>[libc.so.6] (361,945,408 samples, 93.36%)</title><rect x="5.8791%" y="1253" width="93.3623%" height="15" fill="rgb(248,123,6)" fg:x="22791879" fg:w="361945408"/><text x="6.1291%" y="1263.50">[libc.so.6]</text></g><g><title>main (361,945,408 samples, 93.36%)</title><rect x="5.8791%" y="1237" width="93.3623%" height="15" fill="rgb(206,91,31)" fg:x="22791879" fg:w="361945408"/><text x="6.1291%" y="1247.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (361,443,904 samples, 93.23%)</title><rect x="6.0084%" y="1221" width="93.2329%" height="15" fill="rgb(211,154,13)" fg:x="23293383" fg:w="361443904"/><text x="6.2584%" y="1231.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (361,443,904 samples, 93.23%)</title><rect x="6.0084%" y="1205" width="93.2329%" height="15" fill="rgb(225,148,7)" fg:x="23293383" fg:w="361443904"/><text x="6.2584%" y="1215.50">core::ops::function::FnOnce::call_once</text></g><g><title>profile::main (361,443,904 samples, 93.23%)</title><rect x="6.0084%" y="1189" width="93.2329%" height="15" fill="rgb(220,160,43)" fg:x="23293383" fg:w="361443904"/><text x="6.2584%" y="1199.50">profile::main</text></g><g><title>profile::demean_impl (297,385,324 samples, 76.71%)</title><rect x="22.5321%" y="1173" width="76.7093%" height="15" fill="rgb(213,52,39)" fg:x="87351963" fg:w="297385324"/><text x="22.7821%" y="1183.50">profile::demean_impl</text></g><g><title>profile::internal::calc_group_weights (1,611,660 samples, 0.42%)</title><rect x="98.8256%" y="1157" width="0.4157%" height="15" fill="rgb(243,137,7)" fg:x="383125627" fg:w="1611660"/><text x="99.0756%" y="1167.50"></text></g><g><title>all (387,678,470 samples, 100%)</title><rect x="0.0000%" y="1317" width="100.0000%" height="15" fill="rgb(230,79,13)" fg:x="0" fg:w="387678470"/><text x="0.2500%" y="1327.50"></text></g><g><title>profile (387,678,470 samples, 100.00%)</title><rect x="0.0000%" y="1301" width="100.0000%" height="15" fill="rgb(247,105,23)" fg:x="0" fg:w="387678470"/><text x="0.2500%" y="1311.50">profile</text></g><g><title>write (2,941,183 samples, 0.76%)</title><rect x="99.2413%" y="1285" width="0.7587%" height="15" fill="rgb(223,179,41)" fg:x="384737287" fg:w="2941183"/><text x="99.4913%" y="1295.50"></text></g></svg></svg>