---
title: "Replicating The Effect via PyFixest and fixest"
author: "Alexander Fischer"
date: "2023-04-05"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

This notebook replicates code examples from Nick Huntington-Klein's book on causal inference, The Effect.

## Chapter 4: Describing Relationships

### R code

```{r, warning = FALSE, message = FALSE, eval = FALSE}
library(tidyverse)
library(modelsummary)
# 5. Run a linear regression, by itself and including controls
model1 <- lm(lwg ~ log(inc), data = df)
# k5 is number of kids under 5 in the house
model2 <- lm(lwg ~ log(inc) + wc + k5, data = df)
# And make a nice table
msummary(list(model1, model2))
```


### Python Code

```{python, warning = FALSE, message = FALSE}
import pandas as pd
import numpy as np
import pyfixest as pf
from causaldata import Mroz

# Read in data
dt = Mroz.load_pandas().data
# Keep just working women
dt = dt[dt['lfp'] == True]
# Create unlogged earnings
dt.loc[:,'earn'] = dt['lwg'].apply('exp')


# 5. Run a linear regression, by itself and including controls
fixest = pf.Fixest(dt)
fixest.feols("lwg ~ csw(inc, wc, k5)", vcov = "iid")
fixest.summary()

```

## Chapter 13: Regression

### Example 1

#### R

```{r, warning = FALSE, message = FALSE}
library(tidyverse)
library(modelsummary)
library(fixest)
res <- causaldata::restaurant_inspections

res <- res %>%
    # Create NumberofLocations
    group_by(business_name) %>%
    mutate(NumberofLocations = n())

# Perform the first, one-predictor regression
# use the lm() function, with ~ telling us what
# the dependent variable varies over
m1 <- feols(inspection_score ~ NumberofLocations, data = res)

# Now add year as a control
# Just use + to add more terms to the regression
m2 <- feols(inspection_score ~ NumberofLocations + Year, data = res)
msummary(list(m1, m2),
    stars=TRUE,
    output= 'regression_table.html')
```

#### Python

```{python, warning = FALSE, message = FALSE}
import pandas as pd
import pyfixest as pf
from causaldata import restaurant_inspections

res = restaurant_inspections.load_pandas().data
res.inspection_score = res.inspection_score.astype(float)
res.NumberofLocations = res.NumberofLocations.astype(float)
res.dtypes

fixest = pf.Fixest(res)
fixest.feols("inspection_score ~ NumberofLocations")
fixest.tidy()

```

Ok, estimates in R and Python are different ... turns out this is not an error in `PyFixest`, but the data set created for R and Python look slightly different. Passing the `pd.DataFrame` from R to Python leads to matching results:

```{r}
library(reticulate)
res <- py$res
feols(inspection_score ~ csw(NumberofLocations, Year), data = res)
```


### Example 2

#### R

```{r, warning = FALSE, message = FALSE}
# Load packages and data
library(tidyverse)
library(modelsummary)
df <- causaldata::restaurant_inspections

# Use I() to add calculations of variables
# Including squares
m1 <- lm(inspection_score ~ NumberofLocations +
                         I(NumberofLocations^2) +
                         Year, data = df)
summary(m1)

m2 <- lm(inspection_score ~ NumberofLocations*Weekend +
                         Year, data = df)

```

```{python, warning = FALSE, message = FALSE}
import pyfixest as pf
from causaldata import restaurant_inspections

df = restaurant_inspections.load_pandas().data
fixest = pf.Fixest(df)

fixest.feols("inspection_score ~ NumberofLocations + I(NumberofLocations^2) + Year")
fixest.feols("inspection_score ~ NumberofLocations*Weekend + Year")

fixest.summary()

```


### Example 3: HC3 standard errors

#### R Code
```{r, warning = FALSE, message = FALSE}
library(fixest)
library(sandwich)

df <- causaldata::restaurant_inspections
m1 <- lm(inspection_score ~ Year + Weekend, data = df)
vcov <- sandwich::vcovHC(m1, type = "HC3")

msummary(m1, vcov = vcov)
```

#### Python Code
```{python, message = FALSE, warning = FALSE}
import pyfixest as pf
from causaldata import restaurant_inspections
df = restaurant_inspections.load_pandas().data

fixest = pf.Fixest(df)
fixest.feols('inspection_score ~ Year + Weekend', vcov = "HC3").summary()

```


### Example 4: Clustered Standard Errors

```{r, warning = FALSE, message = FALSE}
# For approach 3
library(fixest)

df <- causaldata::restaurant_inspections

# In R there are many ways to get at clustered SEs. For the first
# two methods we'll look at, we need to estimate the regression on
# its own. (most commands will work, not just lm()!)
m1 <- lm(inspection_score ~ Year + Weekend, data = df)

# Third, we can use a regression function with clustered SEs built in,
# like fixest::feols(). Don't forget the ~ before Weekend.
feols(inspection_score ~ Year + Weekend,
    cluster = ~Weekend,
    data = df)

```

#### Python Code

```{python, warning = FALSE, message = FALSE}
import pyfixest as pf
from causaldata import restaurant_inspections
df = restaurant_inspections.load_pandas().data

fixest = pf.Fixest(df)
fixest.feols('inspection_score ~ Year + Weekend', vcov = {"CRV1":"Weekend"}).summary()

```

### Example 5: Bootstrap Standard Errors

#### R Code

```{r, warning = FALSE, message=FALSE}
library(fwildclusterboot)
df <- causaldata::restaurant_inspections

# Let's run our standard model from before
m <- lm(inspection_score ~ Year + Weekend, data = df)
boot <- boottest(m, param = ~WeekendTRUE, clustid = ~Weekend, B = 9999)
```


#### Python

via wildboottest. to be implemented

```{python, warning = FALSE, message=FALSE}

```

## Chapter 16: Fixed Effects

### Example 1

#### R Code

```{r, warning = FALSE, message=FALSE}
library(tidyverse); library(modelsummary)
gm <- causaldata::gapminder

gm <- gm %>%
    # Put GDP per capita in log format since it's very skewed
    mutate(log_GDPperCap = log(gdpPercap)) %>%
    # Perform each calculation by group
    group_by(country) %>%
    # Get within variation by subtracting out the mean
    mutate(lifeExp_within = lifeExp - mean(lifeExp),
    log_GDPperCap_within = log_GDPperCap - mean(log_GDPperCap)) %>%
    # We no longer need the grouping
    ungroup()

# Analyze the within variation
m1 <- lm(lifeExp_within ~ log_GDPperCap_within, data = gm)
msummary(m1, stars = c('*' = .1, '**' = .05, '***' = .01)) |> head()
```

#### Python Code

```{python, eval = FALSE}
import pyfixest as pf
import numpy as np
from causaldata import gapminder
gm = gapminder.load_pandas().data

# Put GDP per capita in log format since it's very skewed
gm['logGDPpercap'] = gm['gdpPercap'].apply('log')

# Use groupby to perform calculations by group
# Then use transform to subtract each variable's
# within-group mean to get within variation
gm[['logGDPpercap_within','lifeExp_within']] =(gm.groupby('country')[['logGDPpercap','lifeExp']].transform(lambda x: x - np.mean(x)))

fixest = pf.Fixest(gm)
fixest.feols("lifeExp_within ~ log_GDPperCap_within")
fixest.tidy().head()
```

### Example 2

#### R Code

```{r, warning = FALSE, message=FALSE}
library(tidyverse);
library(fixest)

gm <- causaldata::gapminder

# Simply include a factor variable in the model to get it turned
# to binary variables. You can use factor() to ensure it's done.
m2 <- feols(lifeExp ~ factor(country) + log(gdpPercap), data = gm)
summary(m2)
```


#### Python Code

```{python, warning = FALSE, message=FALSE}
import pyfixest as pf
import numpy as np
from causaldata import gapminder
gm = gapminder.load_pandas().data
gm['logGDPpercap'] = gm['gdpPercap'].apply('log')

fixest = pf.Fixest(gm)
fixest.feols("lifeExp ~ C(country) + np.log(gdpPercap)")
fixest.summary()

```


### Example 3: TWFE

#### R Code

```{r, warning = FALSE, message=FALSE}
library(tidyverse);
library(modelsummary);
library(fixest)

gm <- causaldata::gapminder

# Run our two-way fixed effects model (TWFE).
# First the non-fixed effects part of the model
# Then a |, then the fixed effects we want
twfe <- feols(lifeExp ~ log(gdpPercap) | country + year,
             data = gm)
# Note that standard errors will be clustered by the first
# fixed effect by default. Set se = 'standard' to not do this
msummary(twfe, stars = c('*' = .1, '**' = .05, '***' = .01))
```


#### Python Code

```{python, warning = FALSE, message=FALSE}
import pyfixest as pf
from causaldata import gapminder
gm = gapminder.load_pandas().data
gm['logGDPpercap'] = gm['gdpPercap'].apply('log')

# Set our individual and time (index) for our data
fixest = pf.Fixest(gm)
fixest.feols("lifeExp ~ np.log(gdpPercap) | country + year")
fixest.summary()
```


## Chapter 18: Difference-in-Differences

### Example 1

```{r, warning = FALSE, message=FALSE}
library(tidyverse); library(modelsummary); library(fixest)
od <- causaldata::organ_donations

# Treatment variable
od <- od %>%
     mutate(Treated = State == 'California' &
            Quarter %in% c('Q32011','Q42011','Q12012'))

# feols clusters by the first
# fixed effect by default, no adjustment necessary
clfe <- feols(Rate ~ Treated | State + Quarter,
           data = od)
etable(clfe)
```

```{python, warning = FALSE, message=FALSE}
import pyfixest as pf
import linearmodels as lm
from causaldata import organ_donations
od = organ_donations.load_pandas().data

# Create Treatment Variable
od['California'] = od['State'] == 'California'
od['After'] = od['Quarter_Num'] > 3
od['Treated'] = 1*(od['California'] & od['After'])

fixest = pf.Fixest(od)
fixest.feols("Rate ~ Treated | State + Quarter")
fixest.summary()

```

### Example 3: Dynamic Treatment Effect

```{r, warning = FALSE, message=FALSE}
library(tidyverse); library(fixest)
od <- causaldata::organ_donations

# Treatment variable
od <- od %>% mutate(California = State == 'California')

# Interact quarter with being in the treated group using
# the fixest i() function, which also lets us specify
# a reference period (using the numeric version of Quarter)
clfe <- feols(Rate ~ i(Quarter_Num, California, ref = 3) |
            State + Quarter_Num, data = od)

# And use coefplot() for a graph of effects
coefplot(clfe)
```

```{python, warning = FALSE, message=FALSE}
import pyfixest as pf
import pandas as pd
import matplotlib as plt
from causaldata import organ_donations
od = organ_donations.load_pandas().data

# Create Treatment Variable
od['California'] = od['State'] == 'California'
od["Quarter_Num"] = pd.Categorical(od.Quarter_Num)
od["California"] = od.California.astype(float)

fixest = pf.Fixest(od)
fixest.feols("Rate ~ i(Quarter_Num, California, ref = 3) | State + Quarter_Num")
fixest.iplot()


```


