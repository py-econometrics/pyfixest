{
  "hash": "0571f60993c8e876730e479b8316855f",
  "result": {
    "markdown": "# News\n\n## PyFixest 0.14.0\n\n- Moves the documentation to [quartodoc](https://github.com/machow/quartodoc).\n- Changes all docstrings to `numpy` format.\n- Difference-in-differences estimation functions now need to be imported via the `pyfixest.did.estimation` module:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom pyfixest.did.estimation import did2s, lpdid, event_study\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      You have loaded the 'pyfixest.did' module. While every function is tested in `tests/test_did.py`,\n      the module is not yet as thoroughly tested as I would like. So please use it with caution and\n      provide feedback in case you stumble over any bugs!\n      \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"2cCfPX\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.0.1/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"2cCfPX\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"2cCfPX\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n:::\n\n\n## PyFixest 0.13.4\n\n- Fixes a bug in `etable()` with IV's that occurred because `feols()` does not report R2 statistics for IVs.\n\n## PyFixest 0.13.2\n\n- Fixes a bug in `etable()` and a warning in `fixest_model_matrix` that arose with higher `pandas` versions. Thanks to @aeturrell for reporting!\n\n## PyFixest 0.13.0\n\n### New Features\n\n- Introduces a new `pyfixest.did` module which contains routines for Difference-in-Differences estimation.\n- Introduces support for basic versions of the local projections DiD estimator following [Dube et al (2023)](https://www.nber.org/papers/w31184)\n- Adds a new vignette for Difference-in-Differences estimation.\n- Reports R2 values in `etable()`.\n\n\n## PyFixest 0.12.0\n\n\n### Enhancements:\n\n- Good performance improvements for singleton fixed effects detection. Thanks to [@styfenschaer](https://github.com/styfenschaer) for the PR! See [#229](https://github.com/s3alfisc/pyfixest/issues/229).\n- Uses the [r2u project](https://github.com/eddelbuettel/r2u) for installing R and R packages on github actions, with great performance improvements.\n- Allows to pass `polars` data frames to `feols()`, `fepois()` and `predict()`. [#232](https://github.com/s3alfisc/pyfixest/issues/232). Thanks to [@vincentarelbundock](https://github.com/s3alfisc/pyfixest/issues/232) for the suggestion!\n\n### Bug Fixes:\n\n- Missing variables in features were not always handled correctly in `predict()` with `newdata` not `None` in the presence of missing data, which would lead to an error. See [#246](https://github.com/s3alfisc/pyfixest/issues/246) for details.\n- Categorical variables were not always handled correctly in `predict()` with `newdata` not `None`, because the number of fixed effects levels in `newdata` might be smaller than in `data`. In consequence, some levels were not found, which lead to an error. See [#245](https://github.com/s3alfisc/pyfixest/issues/245) for details. Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- Multicollinearity checks for over-identified IV was not implemented correctly, which lead to a dimension error. See [#236](https://github.com/s3alfisc/pyfixest/issues/236) for details.  Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- The number of degrees of freedom `k` was computed incorrectly if columns were dropped from the design matrix `X` in the presence of multicollinearity. See [#235](https://github.com/s3alfisc/pyfixest/issues/235) for details.  Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- If all variables were dropped due to multicollinearity, an unclear and imprecise error message was produced. See [#228](https://github.com/s3alfisc/pyfixest/issues/228) for details. Thanks to [@manferdinig](https://github.com/manferdinig) for the pointer!\n- If selection `fixef_rm = 'singleton'`, `feols()` and `fepois()` would fail, which has been fixed. [#192](https://github.com/s3alfisc/pyfixest/issues/192)\n\n### Dependency Requirements\n\n- For now, sets `formulaic` versions to be `0.6.6` or lower as version `1.0.0` seems to have introduced a problem with the `i()` operator, See [#244](https://github.com/s3alfisc/pyfixest/issues/244) for details.\n- Drops dependency on `pyhdfe`.\n\n## PyFixest 0.11.1\n\n- Fixes some bugs around the computation of R-squared values (see [issue #103](https://github.com/s3alfisc/pyfixest/issues/103)).\n- Reports R-squared values again when calling `.summary()`.\n\n## PyFixest 0.11.0\n\n- Significant speedups for CRV1 inference.\n\n## PyFixest 0.10.12\n\nFixes a small bug with the separation check for poisson regression #138.\n\n## PyFixest 0.10.11\n\nFixes bugs with i(var1, var2) syntax introduced with PyFixest 0.10.10.\n\n## PyFixest 0.10.10\n\nFixes a bug with variable interactions via `i(var)` syntax. See [issue #221](https://github.com/s3alfisc/pyfixest/issues/211).\n\n## PyFixest 0.10.9\n\nMakes `etable()` prettier and more informative.\n\n## PyFixest 0.10.8\n\n### Breaking changes\nReference levels for the `i()` formula syntax can no longer be set within the formula, but need to be added via the `i_ref1` function argument to either `feols()` and `fepois()`.\n\n### New feature\n\nA `dids2()` function is added, which implements the 2-stage difference-in-differences procedure Ã  la Gardner and follows the syntax of @kylebutts [did2s](https://github.com/kylebutts/did2s) R package.\n\n```py\nfrom pyfixest.did.did import did2s\nfrom pyfixest.estimation import feols\nfrom pyfixest.visualize import iplot\nimport pandas as pd\nimport numpy as np\n\ndf_het = pd.read_csv(\"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\")\n\nfit = did2s(\n    df_het,\n    yname = \"dep_var\",\n    first_stage = \"~ 0 | state + year\",\n    second_stage = \"~i(rel_year)\",\n    treatment = \"treat\",\n    cluster = \"state\",\n    i_ref1 = [-1.0, np.inf],\n)\n\nfit_twfe = feols(\n    \"dep_var ~ i(rel_year) | state + year\",\n    df_het,\n    i_ref1 = [-1.0, np.inf]\n)\n\niplot([fit, fit_twfe], coord_flip=False, figsize = (900, 400), title = \"TWFE vs DID2S\")\n```\n![](figures/event_study.svg)\n\n\n\n## PyFixest 0.10.7\n\n- Adds basic support for event study estimation via two-way fixed effects and Gardner's two-stage \"Did2s\" approach.\n  This is a beta version and experimental. Further updates (i.e. proper event studies vs \"only\" ATTs) and a more flexible\n  did2s front end will follow in future releases.\n\n```python\n%load_ext autoreload\n%autoreload 2\n\nfrom pyfixest.did.did import event_study\nfrom pyfixest.summarize import etable\nimport pandas as pd\ndf_het = pd.read_csv(\"pyfixest/did/data/df_het.csv\")\n\nfit_twfe = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"twfe\"\n)\n\nfit_did2s = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"did2s\"\n)\n\netable([fit_twfe, fit_did2s])\n# | Coefficient   | est1             | est2             |\n# |:--------------|:-----------------|:-----------------|\n# | ATT           | 2.135*** (0.044) | 2.152*** (0.048) |\n# Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n```\n\n## PyFixest 0.10.6\n\n- Adds an `etable()` function that outputs markdown, latex or a pd.DataFrame.\n\n## PyFixest 0.10.5\n\n- Fixes a big in IV estimation that would trigger an error. See [here](https://github.com/s3alfisc/pyfixest/issues/197) for details. Thanks to @aeturrell for reporting!\n\n## PyFixest 0.10.4\n\n- Implements a custom function to drop singleton fixed effects.\n- Additional small performance improvements.\n\n## PyFixest 0.10.3\n\n- Allows for white space in the multiway clustering formula.\n- Adds documentation for multiway clustering.\n\n## PyFixest 0.10.2\n\n- Adds support for two-way clustering.\n- Adds support for CRV3 inference for Poisson regression.\n\n## PyFixest 0.10.1\n\n- Adapts the internal fixed effects demeaning criteron to match `PyHDFE's default.\n- Adds Styfen as coauthor.\n\n## PyFixest 0.10\n\n- Multiple performance improvements.\n- Most importantly, implements a custom demeaning algorithm in `numba` - thanks to Styfen Schaer (@styfenschaer),\n  which leads to performance improvements of 5x or more:\n\n```python\n%load_ext autoreload\n%autoreload 2\n\nimport numpy as np\nimport time\nimport pyhdfe\nfrom pyfixest.demean import demean\n\nnp.random.seed(1238)\nN = 10_000_000\nx = np.random.normal(0, 1, 10*N).reshape((N,10))\nf1 = np.random.choice(list(range(1000)), N).reshape((N,1))\nf2 = np.random.choice(list(range(1000)), N).reshape((N,1))\n\nflist = np.concatenate((f1, f2), axis = 1)\nweights = np.ones(N)\n\nalgorithm = pyhdfe.create(flist)\n\nstart_time = time.time()\nres_pyhdfe = algorithm.residualize(x)\nend_time = time.time()\nprint(end_time - start_time)\n# 26.04527711868286\n\n\nstart_time = time.time()\nres_pyfixest, success = demean(x, flist, weights, tol = 1e-10)\n# Calculate the execution time\nend_time = time.time()\nprint(end_time - start_time)\n#4.334428071975708\n\nnp.allclose(res_pyhdfe , res_pyfixest)\n# True\n```\n\n\n\n## PyFixest 0.9.11\n\n- Bump required `formulaic` version to `0.6.5`.\n- Stop copying the data frame in `fixef()`.\n\n## PyFixest 0.9.10\n\n- Fixes a big in the `wildboottest` method (see [#158](https://github.com/s3alfisc/pyfixest/issues/158)).\n- Allows to run a wild bootstrap after fixed effect estimation.\n\n## PyFixest 0.9.9\n\n- Adds support for `wildboottest` for Python `3.11`.\n\n## PyFixest 0.9.8\n\n- Fixes a couple more bugs in the `predict()` and `fixef()` methods.\n- The `predict()` argument `data` is renamed to `newdata`.\n\n## PyFixest 0.9.7\n\nFixes a bug in `predict()` produced when multicollinear variables are dropped.\n\n## PyFixest 0.9.6\n\nImproved Collinearity handling. See [#145](https://github.com/s3alfisc/pyfixest/issues/145)\n\n## PyFixest 0.9.5\n\n\n- Moves plotting from `matplotlib` to `lets-plot`.\n- Fixes a few minor bugs in plotting and the `fixef()` method.\n\n\n## PyFixest 0.9.1\n\n### Breaking API changes\n\nIt is no longer required to initiate an object of type `Fixest` prior to running [Feols(/reference/Feols.qmd) or `fepois`. Instead,\nyou can now simply use `feols()` and `fepois()` as functions, just as in `fixest`. Both function can be found in an\n`estimation` module and need to obtain a `pd.DataFrame` as a function argument:\n\n```py\nfrom pyfixest.estimation import fixest, fepois\nfrom pyfixest.utils import get_data\n\ndata = get_data()\nfit = feols(\"Y ~ X1 | f1\", data = data, vcov = \"iid\")\n```\n\nCalling `feols()` will return an instance of class [Feols(/reference/Feols.qmd), while calling `fepois()` will return an instance of class `Fepois`.\nMultiple estimation syntax will return an instance of class `FixestMulti`.\n\nPost processing works as before via `.summary()`, `.tidy()` and other methods.\n\n### New Features\n\nA summary function allows to compare multiple models:\n\n```py\nfrom pyfixest.summarize import summary\nfit2 = feols(\"Y ~ X1 + X2| f1\", data = data, vcov = \"iid\")\nsummary([fit, fit2])\n```\n\nVisualization is possible via custom methods (`.iplot()` & `.coefplot()`), but a new module allows to visualize\n  a list of [Feols(/reference/Feols.qmd) and/or `Fepois` instances:\n\n```py\nfrom pyfixest.visualize import coefplot, iplot\ncoefplot([fit, fit2])\n```\n\nThe documentation has been improved (though there is still room for progress), and the code has been cleaned up a\nbit (also lots of room for improvements).\n\n",
    "supporting": [
      "news_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}