---
title: Contributing
---

# Overview

Thanks for showing interest in contributing to `pyfixest`! We appreciate all
contributions and constructive feedback, whether that be reporting bugs, requesting
new features, or suggesting improvements to documentation.

If you'd like to get involved, but are not yet sure how, please feel free to send us an [email](alexander-fischer1801@t-online.de). Some familiarity with
either Python or econometrics will help, but you really don't need to be a `numpy` core developer or have published in [Econometrica](https://onlinelibrary.wiley.com/journal/14680262) =) We'd be more than happy to invest time to help you get started!

## Reporting bugs

We use [GitHub issues](https://github.com/py-econometrics/pyfixest/issues) to track bugs. You can report a bug by opening a new issue or contribute to an existing issue if
related to the bug you are reporting.

Before creating a bug report, please check that your bug has not already been reported, and that your bug exists on the latest version of pyfixest. If you find a closed issue that seems to report the same bug you're experiencing, open a new issue and include a link to the original issue in your issue description.

Please include as many details as possible in your bug report. The information helps the maintainers resolve the issue faster.

## Suggesting enhancements

We use [GitHub issues](https://github.com/py-econometrics/pyfixest/issues?q=is%3Aissue+is%3Aopen+label%3Aenhancement) to track bugs and suggested enhancements. You can suggest an enhancement by opening a new feature request. Before creating an enhancement suggestion, please check that a similar issue does not already exist.

Please describe the behavior you want and why, and provide examples of how pyfixest would be used if your feature were added.

## Contributing to the codebase

### Setting up your local environment

`pyfixest` development flow relies on Python. Testing statistical and econometric
models is implement using Python and R. Documents are written with Quarto and
Jupyter.

Start by forking the pyfixest GitHub repository, then clone your forked repository
using `git`:

```{.bash .code-copy}
git clone https://github.com/<username>/pyfixest.git
cd pyfixest
```

In order to work on `pyfixest`, you will need Python and R installed. If working
on documentation, you will need Quarto installed.

There are multiple ways of installing Python and R, but if you need to install
them prior to development the following are potential options:

#### Installing Python

The minimal Python version to develop `pyfixest` is `3.9`. You can installed it on Mac/Linux via [Hombrew](https://brew.sh/):

```{.bash .code-copy}
brew install python@3.11 # specify the version of python you prefer
```

On Windows via [Winget](https://winget.run/pkg/Python/Python.3.11):
```{.bash .code-copy}
winget install -e --id Python.Python.3.11
```

### Installing R

Note that installing R and the R packages listed below is only necessary if you want to test against R in your local installation.
You can also test against R by using github actions.

On Mac/Linux:
```{.bash .code-copy}
brew install r
```

Depending on your local set up, you may need to install additional libraries, for
example:

```{.bash .code-copy}
sudo apt install gcc-11 cmake
```

On Windows using [Winget](https://winget.run/pkg/RProject/R):

```{.bash .code-copy}
winget install -e --id RProject.R
```

Documentation for `pyfixest` is written, compiled, and published using Quarto.

To install Quarto, run:

On MacOS via [Homebrew](https://formulae.brew.sh/cask/quarto#default):

```{.bash .code-copy}
brew install --cask quarto
```

On Linux (Ubuntu using `gdebi`):

```{.bash .code-copy}
sudo curl -o quarto-linux-amd64.deb -L <https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.deb>
sudo gdebi quarto-linux-amd64.deb
```

On Windows:

```{.bash .code-copy}
scoop bucket add extras
scoop install extras/quarto
```

### Package Management

`PyFixest` is using [pixi](https://pixi.sh/latest/).

Please follow the [installation instructions](https://pixi.sh/latest/#installation) from the `pixi` documentation.

Afterwards, you can initiate the project environment and install all dependencies by running

```{.bash .code-copy}
cd path-to-pyfixest
pixi install
```

If you type
```{.bash .code-copy}
pixi shell
```

you will see that you have activated a custom `pixi` environment for `pyfixest`.

### Code Style

We use `ruff` and `pre-commit` to ensure a consistent code style.

To install the required hooks, run

```{.bash .code-copy}
pixi run lint
```

and you're ready to go!

### `Pixi` tasks

There are several command line targets that assist with development included
as `pixi` tasks.


```{.bash .code-copy}
# install all R development dependencies
pixi r install-r
# run all tests via pytest
pixi r tests
# run all tests excluding very computationally demanding tests
pixi r tests-regular
```

To rebuild the documentation locally, you can run

```{.bash .code-copy}
# Build documentation and website
pixi r docs-build
# render the docs
pixi r docs-render
# preview the docs
pixi r docs-preview
```

To run the linter, you can run

```{.bash .code-copy}
just r lint
```

To re-create the csv files in `tests/data` that contain results from R packages for testing, you can run

```{.bash .code-copy}
`just update-tests-data`
```
