[
  {
    "objectID": "difference-in-differences.html",
    "href": "difference-in-differences.html",
    "title": "",
    "section": "",
    "text": "PyFixest supports eventy study designs via the canonical two-way fixed effects design Gardner’s 2-stage estimator, and the local projections approach following Dube et al (2023).\n\n%load_ext autoreload\n%autoreload 2\n\nimport pandas as pd\nimport numpy as np\nfrom pyfixest.estimation import feols\nfrom pyfixest.did.estimation import did2s\nfrom pyfixest.did.estimation import lpdid\n\nurl = \"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\ndf_het.head()\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n\n\n\n  \n    \n      \n      unit\n      state\n      group\n      unit_fe\n      g\n      year\n      year_fe\n      treat\n      rel_year\n      rel_year_binned\n      error\n      te\n      te_dynamic\n      dep_var\n    \n  \n  \n    \n      0\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1990\n      0.066159\n      False\n      -20.0\n      -6\n      -0.086466\n      0\n      0.0\n      7.022709\n    \n    \n      1\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1991\n      -0.030980\n      False\n      -19.0\n      -6\n      0.766593\n      0\n      0.0\n      7.778628\n    \n    \n      2\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1992\n      -0.119607\n      False\n      -18.0\n      -6\n      1.512968\n      0\n      0.0\n      8.436377\n    \n    \n      3\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1993\n      0.126321\n      False\n      -17.0\n      -6\n      0.021870\n      0\n      0.0\n      7.191207\n    \n    \n      4\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1994\n      -0.106921\n      False\n      -16.0\n      -6\n      -0.017603\n      0\n      0.0\n      6.918492\n    \n  \n\n\n\n\n\n\nWe can estimate a simple two-way fixed effects DiD regression via feols():\n\nfit_twfe = feols(\n    \"dep_var ~ i(rel_year) | state + year\",\n    df_het,\n    i_ref1=[-1.0, np.inf],\n    vcov={\"CRV1\": \"state\"},\n)\n\nTo do the same via Gardners 2-stage estimator, we employ the the did2s() function:\n\nfrom pyfixest.did.estimation import did2s\n\nfit_did2s = did2s(\n    df_het,\n    yname=\"dep_var\",\n    first_stage=\"~ 0 | state + year\",\n    second_stage=\"~i(rel_year)\",\n    treatment=\"treat\",\n    cluster=\"state\",\n    i_ref1=[-1.0, np.inf],\n)\n\nLast, we can estimate the ATT for each time period via local projections by using the lpdid() function:\n\nfrom pyfixest.did.estimation import lpdid\n\nfit_lpdid = lpdid(\n    data=df_het,\n    yname=\"dep_var\",\n    gname=\"g\",\n    tname=\"year\",\n    idname=\"unit\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=False,\n)\n\nLet’s look at some results:\n\nfigsize = [1200, 400]\n\n\nfit_twfe.iplot(\n    coord_flip=False,\n    title=\"TWFE-Estimator\",\n    figsize=figsize,\n    xintercept=18.5,\n    yintercept=0,\n    figsize=[1200, 400],\n).show()\n\n   \n   \n\n\n\nfit_did2s.iplot(\n    coord_flip=False,\n    title=\"DID2s-Estimator\",\n    figsize=figsize,\n    xintercept=18.5,\n    yintercept=0,\n    figsize=[1200, 400],\n).show()\n\n   \n   \n\n\n\nfit_lpdid.iplot(\n    coord_flip=False,\n    title=\"Local-Projections-Estimator\",\n    figsize=figsize,\n    yintercept=0,\n    xintercept=18.5,\n    figsize=[1200, 400],\n).show()\n\n   \n   \n\n\nWhat if we are not interested in the ATT per treatment period, but in a pooled effects?\n\nfit_twfe = feols(\n    \"dep_var ~ i(treat) | unit + year\",\n    df_het,\n    vcov={\"CRV1\": \"state\"},\n)\n\nfit_did2s = did2s(\n    df_het,\n    yname=\"dep_var\",\n    first_stage=\"~ 0 | unit + year\",\n    second_stage=\"~i(treat)\",\n    treatment=\"treat\",\n    cluster=\"state\",\n)\n\nfit_lpdid = lpdid(\n    data=df_het,\n    yname=\"dep_var\",\n    gname=\"g\",\n    tname=\"year\",\n    idname=\"unit\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=True,\n)\n\n\nfit_twfe.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      C(treat)[T.True]\n      1.98254\n      0.019331\n      102.55618\n      0.0\n      1.943439\n      2.021642\n    \n  \n\n\n\n\n\nfit_did2s.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      C(treat)[T.True]\n      2.230482\n      0.024709\n      90.271437\n      0.0\n      2.182052\n      2.278911\n    \n  \n\n\n\n\n\nfit_lpdid.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n      N\n    \n  \n  \n    \n      treat_diff\n      2.506746\n      0.071357\n      35.129648\n      0.0\n      2.362413\n      2.65108\n      5716.0"
  },
  {
    "objectID": "news.html",
    "href": "news.html",
    "title": "",
    "section": "",
    "text": "Adds support for weighted least squares for feols().\nReduces testing time drastically by running tests on fewer random data samples. Qualitatively, the set of test remains identical.\nSome updates for future pandas compatibility.\n\n\n\n\n\nMoves the documentation to quartodoc.\nChanges all docstrings to numpy format.\nDifference-in-differences estimation functions now need to be imported via the pyfixest.did.estimation module:\n\n\nfrom pyfixest.did.estimation import did2s, lpdid, event_study\n\n\n      You have loaded the 'pyfixest.did' module. While every function is tested in `tests/test_did.py`,\n      the module is not yet as thoroughly tested as I would like. So please use it with caution and\n      provide feedback in case you stumble over any bugs!\n      \n\n\n\n            \n            \n            \n\n\n\n\n\n\nFixes a bug that lead to incorrect results when the dependent variable and all covariates (excluding the fixed effects) where integers.\n\n\n\n\n\nFixes a bug in etable() with IV’s that occurred because feols() does not report R2 statistics for IVs.\n\n\n\n\n\nFixes a bug in etable() and a warning in fixest_model_matrix that arose with higher pandas versions. Thanks to @aeturrell for reporting!\n\n\n\n\n\n\n\nIntroduces a new pyfixest.did module which contains routines for Difference-in-Differences estimation.\nIntroduces support for basic versions of the local projections DiD estimator following Dube et al (2023)\nAdds a new vignette for Difference-in-Differences estimation.\nReports R2 values in etable().\n\n\n\n\n\n\n\n\nGood performance improvements for singleton fixed effects detection. Thanks to @styfenschaer for the PR! See #229.\nUses the r2u project for installing R and R packages on github actions, with great performance improvements.\nAllows to pass polars data frames to feols(), fepois() and predict(). #232. Thanks to @vincentarelbundock for the suggestion!\n\n\n\n\n\nMissing variables in features were not always handled correctly in predict() with newdata not None in the presence of missing data, which would lead to an error. See #246 for details.\nCategorical variables were not always handled correctly in predict() with newdata not None, because the number of fixed effects levels in newdata might be smaller than in data. In consequence, some levels were not found, which lead to an error. See #245 for details. Thanks to @jiafengkevinchen for the pointer!\nMulticollinearity checks for over-identified IV was not implemented correctly, which lead to a dimension error. See #236 for details. Thanks to @jiafengkevinchen for the pointer!\nThe number of degrees of freedom k was computed incorrectly if columns were dropped from the design matrix X in the presence of multicollinearity. See #235 for details. Thanks to @jiafengkevinchen for the pointer!\nIf all variables were dropped due to multicollinearity, an unclear and imprecise error message was produced. See #228 for details. Thanks to @manferdinig for the pointer!\nIf selection fixef_rm = 'singleton', feols() and fepois() would fail, which has been fixed. #192\n\n\n\n\n\nFor now, sets formulaic versions to be 0.6.6 or lower as version 1.0.0 seems to have introduced a problem with the i() operator, See #244 for details.\nDrops dependency on pyhdfe.\n\n\n\n\n\n\nFixes some bugs around the computation of R-squared values (see issue #103).\nReports R-squared values again when calling .summary().\n\n\n\n\n\nSignificant speedups for CRV1 inference.\n\n\n\n\nFixes a small bug with the separation check for poisson regression #138.\n\n\n\nFixes bugs with i(var1, var2) syntax introduced with PyFixest 0.10.10.\n\n\n\nFixes a bug with variable interactions via i(var) syntax. See issue #221.\n\n\n\nMakes etable() prettier and more informative.\n\n\n\n\n\nReference levels for the i() formula syntax can no longer be set within the formula, but need to be added via the i_ref1 function argument to either feols() and fepois().\n\n\n\nA dids2() function is added, which implements the 2-stage difference-in-differences procedure à la Gardner and follows the syntax of @kylebutts did2s R package.\nfrom pyfixest.did.did import did2s\nfrom pyfixest.estimation import feols\nfrom pyfixest.visualize import iplot\nimport pandas as pd\nimport numpy as np\n\ndf_het = pd.read_csv(\"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\")\n\nfit = did2s(\n    df_het,\n    yname = \"dep_var\",\n    first_stage = \"~ 0 | state + year\",\n    second_stage = \"~i(rel_year)\",\n    treatment = \"treat\",\n    cluster = \"state\",\n    i_ref1 = [-1.0, np.inf],\n)\n\nfit_twfe = feols(\n    \"dep_var ~ i(rel_year) | state + year\",\n    df_het,\n    i_ref1 = [-1.0, np.inf]\n)\n\niplot([fit, fit_twfe], coord_flip=False, figsize = (900, 400), title = \"TWFE vs DID2S\")\n\n\n\n\n\n\nAdds basic support for event study estimation via two-way fixed effects and Gardner’s two-stage “Did2s” approach. This is a beta version and experimental. Further updates (i.e. proper event studies vs “only” ATTs) and a more flexible did2s front end will follow in future releases.\n\n%load_ext autoreload\n%autoreload 2\n\nfrom pyfixest.did.did import event_study\nfrom pyfixest.summarize import etable\nimport pandas as pd\ndf_het = pd.read_csv(\"pyfixest/did/data/df_het.csv\")\n\nfit_twfe = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"twfe\"\n)\n\nfit_did2s = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"did2s\"\n)\n\netable([fit_twfe, fit_did2s])\n# | Coefficient   | est1             | est2             |\n# |:--------------|:-----------------|:-----------------|\n# | ATT           | 2.135*** (0.044) | 2.152*** (0.048) |\n# Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\n\n\nAdds an etable() function that outputs markdown, latex or a pd.DataFrame.\n\n\n\n\n\nFixes a big in IV estimation that would trigger an error. See here for details. Thanks to @aeturrell for reporting!\n\n\n\n\n\nImplements a custom function to drop singleton fixed effects.\nAdditional small performance improvements.\n\n\n\n\n\nAllows for white space in the multiway clustering formula.\nAdds documentation for multiway clustering.\n\n\n\n\n\nAdds support for two-way clustering.\nAdds support for CRV3 inference for Poisson regression.\n\n\n\n\n\nAdapts the internal fixed effects demeaning criteron to match `PyHDFE’s default.\nAdds Styfen as coauthor.\n\n\n\n\n\nMultiple performance improvements.\nMost importantly, implements a custom demeaning algorithm in numba - thanks to Styfen Schaer (@styfenschaer), which leads to performance improvements of 5x or more:\n\n%load_ext autoreload\n%autoreload 2\n\nimport numpy as np\nimport time\nimport pyhdfe\nfrom pyfixest.demean import demean\n\nnp.random.seed(1238)\nN = 10_000_000\nx = np.random.normal(0, 1, 10*N).reshape((N,10))\nf1 = np.random.choice(list(range(1000)), N).reshape((N,1))\nf2 = np.random.choice(list(range(1000)), N).reshape((N,1))\n\nflist = np.concatenate((f1, f2), axis = 1)\nweights = np.ones(N)\n\nalgorithm = pyhdfe.create(flist)\n\nstart_time = time.time()\nres_pyhdfe = algorithm.residualize(x)\nend_time = time.time()\nprint(end_time - start_time)\n# 26.04527711868286\n\n\nstart_time = time.time()\nres_pyfixest, success = demean(x, flist, weights, tol = 1e-10)\n# Calculate the execution time\nend_time = time.time()\nprint(end_time - start_time)\n#4.334428071975708\n\nnp.allclose(res_pyhdfe , res_pyfixest)\n# True\n\n\n\n\nBump required formulaic version to 0.6.5.\nStop copying the data frame in fixef().\n\n\n\n\n\nFixes a big in the wildboottest method (see #158).\nAllows to run a wild bootstrap after fixed effect estimation.\n\n\n\n\n\nAdds support for wildboottest for Python 3.11.\n\n\n\n\n\nFixes a couple more bugs in the predict() and fixef() methods.\nThe predict() argument data is renamed to newdata.\n\n\n\n\nFixes a bug in predict() produced when multicollinear variables are dropped.\n\n\n\nImproved Collinearity handling. See #145\n\n\n\n\nMoves plotting from matplotlib to lets-plot.\nFixes a few minor bugs in plotting and the fixef() method.\n\n\n\n\n\n\nIt is no longer required to initiate an object of type Fixest prior to running [Feols(/reference/Feols.qmd) or fepois. Instead, you can now simply use feols() and fepois() as functions, just as in fixest. Both function can be found in an estimation module and need to obtain a pd.DataFrame as a function argument:\nfrom pyfixest.estimation import fixest, fepois\nfrom pyfixest.utils import get_data\n\ndata = get_data()\nfit = feols(\"Y ~ X1 | f1\", data = data, vcov = \"iid\")\nCalling feols() will return an instance of class [Feols(/reference/Feols.qmd), while calling fepois() will return an instance of class Fepois. Multiple estimation syntax will return an instance of class FixestMulti.\nPost processing works as before via .summary(), .tidy() and other methods.\n\n\n\nA summary function allows to compare multiple models:\nfrom pyfixest.summarize import summary\nfit2 = feols(\"Y ~ X1 + X2| f1\", data = data, vcov = \"iid\")\nsummary([fit, fit2])\nVisualization is possible via custom methods (.iplot() & .coefplot()), but a new module allows to visualize a list of [Feols(/reference/Feols.qmd) and/or Fepois instances:\nfrom pyfixest.visualize import coefplot, iplot\ncoefplot([fit, fit2])\nThe documentation has been improved (though there is still room for progress), and the code has been cleaned up a bit (also lots of room for improvements)."
  },
  {
    "objectID": "quickstart.html",
    "href": "quickstart.html",
    "title": "",
    "section": "",
    "text": "In a first step, we load the module and some example data:\n\n%load_ext autoreload\n%autoreload 2\n\nfrom pyfixest.estimation import feols, fepois\nfrom pyfixest.summarize import summary, etable\nfrom pyfixest.visualize import coefplot, iplot\nfrom pyfixest.utils import get_data\n\n\n            \n            \n            \n\n\n\ndata = get_data()\ndata.head()\n\n\n\n\n\n  \n    \n      \n      Y\n      Y2\n      X1\n      X2\n      f1\n      f2\n      f3\n      group_id\n      Z1\n      Z2\n    \n  \n  \n    \n      0\n      NaN\n      2.357103\n      0.0\n      0.457858\n      15.0\n      0.0\n      7.0\n      9.0\n      -0.330607\n      1.054826\n    \n    \n      1\n      -1.458643\n      5.163147\n      NaN\n      -4.998406\n      6.0\n      21.0\n      4.0\n      8.0\n      NaN\n      -4.113690\n    \n    \n      2\n      0.169132\n      0.751140\n      2.0\n      1.558480\n      NaN\n      1.0\n      7.0\n      16.0\n      1.207778\n      0.465282\n    \n    \n      3\n      3.319513\n      -2.656368\n      1.0\n      1.560402\n      1.0\n      10.0\n      11.0\n      3.0\n      2.869997\n      0.467570\n    \n    \n      4\n      0.134420\n      -1.866416\n      2.0\n      -3.472232\n      19.0\n      20.0\n      6.0\n      14.0\n      0.835819\n      -3.115669\n    \n  \n\n\n\n\n\n\nWe can estimate a fixed effects regression via the feols() function. feols() has three arguments: a two-sided model formula, the data, and optionally, the type of inference.\n\nfit = feols(fml=\"Y~X1 | f1\", data=data, vcov=\"HC1\")\ntype(fit)\n\npyfixest.feols.Feols\n\n\nThe first part of the formula contains the dependent variable and “regular” covariates, while the second part contains fixed effects.\nfeols() returns an instance of the Fixest class.\nTo inspect the results, we can use a summary function or method:\n\nfit.summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  HC1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.066 |   -14.311 |      0.000 |  -1.080 |   -0.819 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n\n\nAlternatively, the .summarize module contains a summary function, which can be applied on instances of regression model objects or lists of regression model objects.\n\nsummary(fit)\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  HC1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.066 |   -14.311 |      0.000 |  -1.080 |   -0.819 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n\n\nYou can access individual elements of the summary via dedicated methods: .tidy() returns a “tidy” pd.DataFrame, .coef() returns estimated parameters, and se() estimated standard errors. Other methods include pvalue(), confint() and tstat().\n\nfit.coef()\n\nCoefficient\nX1   -0.949441\nName: Estimate, dtype: float64\n\n\n\nfit.se()\n\nCoefficient\nX1    0.066343\nName: Std. Error, dtype: float64\n\n\n\n\n\nSupported covariance types are “iid”, “HC1-3”, CRV1 and CRV3 (up to two-way clustering). Inference can be adjusted “on-the-fly” via the .vcov() method:\n\nfit.vcov({\"CRV1\": \"group_id + f1\"}).summary()\nfit.vcov({\"CRV3\": \"group_id\"}).summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.088 |   -10.839 |      0.000 |  -1.133 |   -0.765 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  CRV3\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.095 |   -10.005 |      0.000 |  -1.149 |   -0.750 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n\n\nIt is also possible to run a wild (cluster) bootstrap after estimation (via the wildboottest module):\n\nfit2 = feols(fml=\"Y~ X1\", data=data, vcov={\"CRV1\": \"group_id\"})\nfit2.wildboottest(param=\"X1\", B=999)\n\nparam                            X1\nt value                   -8.567587\nPr(>|t|)                        0.0\nbootstrap_type                   11\ninference         CRV(['group_id'])\nimpose_null                    True\ndtype: object\n\n\nNote that the wild bootstrap currently does not support fixed effects in the regression model. Supporting fixed effects is work in progress.\n\n\n\nIt is also possible to estimate instrumental variable models with one endogenous variable and (potentially multiple) instruments:\n\niv_fit = feols(fml=\"Y2~ 1 | f1 + f2 | X1 ~ Z1 + Z2\", data=data)\niv_fit.summary()\n\n###\n\nEstimation:  IV\nDep. var.: Y2, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  998\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -1.600 |        0.333 |    -4.801 |      0.000 |  -2.282 |   -0.919 |\n---\n\n\nIf the model does not contain any fixed effects, just drop the second part of the formula above:\n\nfeols(fml=\"Y~ 1 | X1 ~ Z1 + Z2\", data=data).summary()\n\n###\n\nEstimation:  IV\nDep. var.: Y\nInference:  iid\nObservations:  998\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.911 |        0.156 |     5.843 |      0.000 |   0.605 |    1.217 |\n| X1            |     -0.993 |        0.134 |    -7.398 |      0.000 |  -1.256 |   -0.730 |\n---\n\n\nIV estimation with multiple endogenous variables and multiple estimation syntax is currently not supported. The syntax is “depvar ~ exog.vars | fixef effects | endog.vars ~ instruments”.\n\n\n\nWith version 0.8.4, it is possible to estimate Poisson Regressions (not yet on PyPi):\n\nfrom pyfixest.utils import get_data\n\npois_data = get_data(model=\"Fepois\")\npois_fit = fepois(fml=\"Y~X1 | f1+f2\", data=pois_data, vcov={\"CRV1\": \"group_id\"})\npois_fit.summary()\n\n###\n\nEstimation:  Poisson\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.007 |        0.031 |    -0.237 |      0.813 |  -0.069 |    0.054 |\n---\nDeviance: 1070.729\n\n\n\n\n\nPyFixest supports a range of multiple estimation functionality: sw, sw0, csw, csw0, and multiple dependent variables. If multiple regression syntax is used, feols() and fepois returns an instance of a FixestMulti object, which essentially consists of a dicionary of Fepois or [Feols(/reference/Feols.qmd) instances.\n\nmulti_fit = feols(fml=\"Y~X1 | csw0(f1, f2)\", data=data, vcov=\"HC1\")\nmulti_fit\n\n<pyfixest.FixestMulti.FixestMulti at 0x23bd899c3d0>\n\n\n\nmulti_fit.summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Y\nInference:  HC1\nObservations:  998\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.919 |        0.112 |     8.223 |      0.000 |   0.699 |    1.138 |\n| X1            |     -1.000 |        0.082 |   -12.134 |      0.000 |  -1.162 |   -0.838 |\n---\nRMSE: 2.158   R2: 0.123\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  HC1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.066 |   -14.311 |      0.000 |  -1.080 |   -0.819 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  HC1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.919 |        0.058 |   -15.918 |      0.000 |  -1.033 |   -0.806 |\n---\nRMSE: 1.441   R2: 0.609   R2 Within: 0.2\n\n\nAlternatively, you can look at the estimation results via the etable() method:\n\nmulti_fit.etable()\n\n\n\n\n\n  \n    \n      fml\n      Y~X1\n      Y~X1|f1\n      Y~X1|f1+f2\n    \n    \n      Coefficient\n      Intercept\n      X1\n      X1\n      X1\n    \n  \n  \n    \n      Estimate\n      0.919\n      -1.000\n      -0.949\n      -0.919\n    \n    \n      Std. Error\n      0.112\n      0.082\n      0.066\n      0.058\n    \n    \n      t value\n      8.223\n      -12.134\n      -14.311\n      -15.918\n    \n    \n      Pr(>|t|)\n      0.000\n      0.000\n      0.000\n      0.000\n    \n    \n      2.5 %\n      0.699\n      -1.162\n      -1.080\n      -1.033\n    \n    \n      97.5 %\n      1.138\n      -0.838\n      -0.819\n      -0.806\n    \n  \n\n\n\n\nIf you are only insterested in some parameters, e.g. “X1”, you can use the following syntax:\n\nmulti_fit.etable().xs(\"X1\", level=1, axis=1)\n\n\n\n\n\n  \n    \n      fml\n      Y~X1\n      Y~X1|f1\n      Y~X1|f1+f2\n    \n  \n  \n    \n      Estimate\n      -1.000\n      -0.949\n      -0.919\n    \n    \n      Std. Error\n      0.082\n      0.066\n      0.058\n    \n    \n      t value\n      -12.134\n      -14.311\n      -15.918\n    \n    \n      Pr(>|t|)\n      0.000\n      0.000\n      0.000\n    \n    \n      2.5 %\n      -1.162\n      -1.080\n      -1.033\n    \n    \n      97.5 %\n      -0.838\n      -0.819\n      -0.806\n    \n  \n\n\n\n\nYou can access an individual model by its name - i.e. a formula - via the all_fitted_models attribure.\n\nmulti_fit.all_fitted_models[\"Y~X1\"].tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Intercept\n      0.918518\n      0.111707\n      8.222580\n      6.661338e-16\n      0.699310\n      1.137725\n    \n    \n      X1\n      -1.000086\n      0.082420\n      -12.134086\n      0.000000e+00\n      -1.161822\n      -0.838350\n    \n  \n\n\n\n\nor equivalently via the fetch_model method:\n\nmulti_fit.fetch_model(0).tidy()\n\nModel:  Y~X1\n\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Intercept\n      0.918518\n      0.111707\n      8.222580\n      6.661338e-16\n      0.699310\n      1.137725\n    \n    \n      X1\n      -1.000086\n      0.082420\n      -12.134086\n      0.000000e+00\n      -1.161822\n      -0.838350\n    \n  \n\n\n\n\nHere, 0 simply fetches the first model stored in the all_fitted_models dictionary, 1 the second etc.\nObjects of type Fixest come with a range of additional methods: tidy(), coef(), vcov() etc, which essentially loop over the equivalent methods of all fitted models. E.g. Fixest.vcov() updates inference for all models stored in Fixest.\n\nmulti_fit.vcov(\"iid\").summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Y\nInference:  iid\nObservations:  998\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.919 |        0.112 |     8.214 |      0.000 |   0.699 |    1.138 |\n| X1            |     -1.000 |        0.085 |   -11.802 |      0.000 |  -1.166 |   -0.834 |\n---\nRMSE: 2.158   R2: 0.123\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  iid\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.949 |        0.069 |   -13.846 |      0.000 |  -1.084 |   -0.815 |\n---\nRMSE: 1.73   R2: 0.437   R2 Within: 0.161\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  iid\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.919 |        0.058 |   -15.797 |      0.000 |  -1.033 |   -0.805 |\n---\nRMSE: 1.441   R2: 0.609   R2 Within: 0.2\n\n\nIf you have estimated multiple models without multiple estimation syntax and still want to compare them, you can use the etable() function:\n\nfrom pyfixest.summarize import etable\n\netable([fit, fit2])\n\n                           est1              est2\n------------  -----------------  ----------------\ndepvar                        Y                 Y\n-------------------------------------------------\nX1            -0.949*** (0.095)   -1.0*** (0.117)\nIntercept                        0.919*** (0.121)\n-------------------------------------------------\nf1                            x                 -\n-------------------------------------------------\nR2                        0.437             0.123\nS.E. type          by: group_id      by: group_id\nObservations                997               998\n-------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\n\n\n\nPyFixest provides two functions to visualize the results of a regression: coefplot and iplot.\n\nfrom lets_plot import *\n\nLetsPlot.setup_html()\n\nmulti_fit.coefplot().show()\n\n\n            \n            \n            \n\n\n   \n   \n\n\n\n\n\nPyFixest supports eventy study designs via two-way fixed effects and Gardner’s 2-stage estimator.\n\nimport pandas as pd\nimport numpy as np\nfrom pyfixest.did.estimation import did2s\n\nurl = \"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\ndf_het.head()\n\n\n\n\n\n  \n    \n      \n      unit\n      state\n      group\n      unit_fe\n      g\n      year\n      year_fe\n      treat\n      rel_year\n      rel_year_binned\n      error\n      te\n      te_dynamic\n      dep_var\n    \n  \n  \n    \n      0\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1990\n      0.066159\n      False\n      -20.0\n      -6\n      -0.086466\n      0\n      0.0\n      7.022709\n    \n    \n      1\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1991\n      -0.030980\n      False\n      -19.0\n      -6\n      0.766593\n      0\n      0.0\n      7.778628\n    \n    \n      2\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1992\n      -0.119607\n      False\n      -18.0\n      -6\n      1.512968\n      0\n      0.0\n      8.436377\n    \n    \n      3\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1993\n      0.126321\n      False\n      -17.0\n      -6\n      0.021870\n      0\n      0.0\n      7.191207\n    \n    \n      4\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1994\n      -0.106921\n      False\n      -16.0\n      -6\n      -0.017603\n      0\n      0.0\n      6.918492\n    \n  \n\n\n\n\n\nfit_did2s = did2s(\n    df_het,\n    yname=\"dep_var\",\n    first_stage=\"~ 0 | state + year\",\n    second_stage=\"~i(rel_year)\",\n    treatment=\"treat\",\n    cluster=\"state\",\n    i_ref1=[-1.0, np.inf],\n)\n\nfit_twfe = feols(\n    \"dep_var ~ i(rel_year) | state + year\",\n    df_het,\n    i_ref1=[-1.0, np.inf],\n    vcov={\"CRV1\": \"state\"},\n)\n\niplot(\n    [fit_did2s, fit_twfe], coord_flip=False, figsize=(900, 400), title=\"TWFE vs DID2S\"\n)\n\n   \n   \n\n\nThe event_study() function provides a common API for several event study estimators.\n\nfrom pyfixest.did.event_study import event_study\nfrom pyfixest.summarize import etable\n\nfit_twfe = event_study(\n    data=df_het,\n    yname=\"dep_var\",\n    idname=\"state\",\n    tname=\"year\",\n    gname=\"g\",\n    estimator=\"twfe\",\n)\n\nfit_did2s = event_study(\n    data=df_het,\n    yname=\"dep_var\",\n    idname=\"state\",\n    tname=\"year\",\n    gname=\"g\",\n    estimator=\"did2s\",\n)\n\netable([fit_twfe, fit_did2s])\n\n                          est1              est2\n------------  ----------------  ----------------\ndepvar                 dep_var       dep_var_hat\n------------------------------------------------\nATT           2.135*** (0.044)  2.152*** (0.048)\n------------------------------------------------\nstate                        x                 -\nyear                         x                 -\n------------------------------------------------\nR2                           -                 -\nS.E. type            by: state              CRV1\nObservations             46500             46500\n------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001"
  },
  {
    "objectID": "readme.html#features",
    "href": "readme.html#features",
    "title": "",
    "section": "Features",
    "text": "Features\n\nOLS and IV Regression\nPoisson Regression\nMultiple Estimation Syntax\nSeveral Robust and Cluster Robust Variance-Covariance Types\nWild Cluster Bootstrap Inference (via wildboottest)\nDifference-in-Difference Estimators:\n\nThe canonical Two-Way Fixed Effects Estimator\nGardner’s two-stage (“Did2s”) estimator\nBasic Versions of the Local Projections estimator following Dube et al (2023)"
  },
  {
    "objectID": "readme.html#installation",
    "href": "readme.html#installation",
    "title": "",
    "section": "Installation",
    "text": "Installation\nYou can install the release version from PyPi by running\npip install pyfixest\nor the development version from github by running\npip install git+https://github.com/s3alfisc/pyfixest.git"
  },
  {
    "objectID": "readme.html#news",
    "href": "readme.html#news",
    "title": "",
    "section": "News",
    "text": "News\nPyFixest 0.13 adds support for the local projections Difference-in-Differences Estimator."
  },
  {
    "objectID": "readme.html#benchmarks",
    "href": "readme.html#benchmarks",
    "title": "",
    "section": "Benchmarks",
    "text": "Benchmarks\nAll benchmarks follow the fixest benchmarks. All non-pyfixest timings are taken from the fixest benchmarks."
  },
  {
    "objectID": "readme.html#quickstart",
    "href": "readme.html#quickstart",
    "title": "",
    "section": "Quickstart",
    "text": "Quickstart\n\nFixed Effects Regression via feols()\nYou can estimate a linear regression models just as you would in fixest - via feols():\n\nfrom pyfixest.estimation import feols, fepois\nfrom pyfixest.utils import get_data\nfrom pyfixest.summarize import etable\ndata = get_data()\nfeols(\"Y ~ X1 | f1 + f2\", data=data).summary()\n\n            \n            \n\n\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.919 |        0.065 |   -14.057 |      0.000 |  -1.053 |   -0.786 |\n---\nRMSE: 1.441   R2: 0.609   R2 Within: 0.2\n\n\n\n\nMultiple Estimation\nYou can estimate multiple models at once by using multiple estimation syntax:\n\n# OLS Estimation: estimate multiple models at once\nfit = feols(\"Y + Y2 ~X1 | csw0(f1, f2)\", data = data, vcov = {'CRV1':'group_id'})\n# Print the results\netable([fit.fetch_model(i) for i in range(6)])\n\nModel:  Y~X1\nModel:  Y2~X1\nModel:  Y~X1|f1\nModel:  Y2~X1|f1\nModel:  Y~X1|f1+f2\nModel:  Y2~X1|f1+f2\n                          est1               est2               est3               est4               est5               est6\n------------  ----------------  -----------------  -----------------  -----------------  -----------------  -----------------\ndepvar                       Y                 Y2                  Y                 Y2                  Y                 Y2\n-----------------------------------------------------------------------------------------------------------------------------\nIntercept     0.919*** (0.121)   1.064*** (0.232)\nX1             -1.0*** (0.117)  -1.322*** (0.211)  -0.949*** (0.087)  -1.266*** (0.212)  -0.919*** (0.069)  -1.228*** (0.194)\n-----------------------------------------------------------------------------------------------------------------------------\nf1                           -                  -                  x                  x                  x                  x\nf2                           -                  -                  -                  -                  x                  x\n-----------------------------------------------------------------------------------------------------------------------------\nR2                       0.123              0.037              0.437              0.115              0.609              0.168\nS.E. type         by: group_id       by: group_id       by: group_id       by: group_id       by: group_id       by: group_id\nObservations               998                999                997                998                997                998\n-----------------------------------------------------------------------------------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\n\n\nAdjust Standard Errors “on-the-fly”\nStandard Errors can be adjusted after estimation, “on-the-fly”:\n\nfit1 = fit.fetch_model(0)\nfit1.vcov(\"hetero\").summary()\n\nModel:  Y~X1\n###\n\nEstimation:  OLS\nDep. var.: Y\nInference:  hetero\nObservations:  998\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.919 |        0.112 |     8.223 |      0.000 |   0.699 |    1.138 |\n| X1            |     -1.000 |        0.082 |   -12.134 |      0.000 |  -1.162 |   -0.838 |\n---\nRMSE: 2.158   R2: 0.123\n\n\n\n\nPoisson Regression via fepois()\nYou can estimate Poisson Regressions via the fepois() function:\n\npoisson_data = get_data(model = \"Fepois\")\nfepois(\"Y ~ X1 + X2 | f1 + f2\", data = poisson_data).summary()\n\n###\n\nEstimation:  Poisson\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.008 |        0.035 |    -0.239 |      0.811 |  -0.076 |    0.060 |\n| X2            |     -0.015 |        0.010 |    -1.471 |      0.141 |  -0.035 |    0.005 |\n---\nDeviance: 1068.836\n\n\n\n\nIV Estimation via three-part formulas\nLast, PyFixest also supports IV estimation via three part formula syntax:\n\nfit_iv = feols(\"Y ~ 1 | f1 | X1 ~ Z1\", data = data)\nfit_iv.summary()\n\n###\n\nEstimation:  IV\nDep. var.: Y, Fixed effects: f1\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -1.025 |        0.115 |    -8.930 |      0.000 |  -1.259 |   -0.790 |\n---"
  },
  {
    "objectID": "reference/demean.demean.html",
    "href": "reference/demean.demean.html",
    "title": "",
    "section": "",
    "text": "demean.demean(x, flist, weights, tol=1e-08, maxiter=100000)\nWorkhorse for demeaning an input array x based on the specified fixed effects and weights via the alternating projections algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nnumpy.numpy.ndarray\nInput array of shape (n_samples, n_features). Needs to be of type float.\nrequired\n\n\nflist\nnumpy.numpy.ndarray\nArray of shape (n_samples, n_factors) specifying the fixed effects. Needs to already be converted to integers.\nrequired\n\n\nweights\nnumpy.numpy.ndarray\nArray of shape (n_samples,) specifying the weights.\nrequired\n\n\ntol\nfloat\nTolerance criterion for convergence. Defaults to 1e-08.\n1e-08\n\n\nmaxiter\nint\nMaximum number of iterations. Defaults to 100_000.\n100000\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntyping.Tuple[numpy.numpy.ndarray, bool]\nA tuple containing the demeaned array of shape (n_samples, n_features) and a boolean indicating whether the algorithm converged successfully."
  },
  {
    "objectID": "reference/detect_singletons.detect_singletons.html",
    "href": "reference/detect_singletons.detect_singletons.html",
    "title": "",
    "section": "",
    "text": "detect_singletons.detect_singletons(ids)\nDetect singleton fixed effects in a dataset.\nThis function iterates over the columns of a 2D numpy array representing fixed effects to identify singleton fixed effects. An observation is considered a singleton if it is the only one in its group (fixed effect identifier).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nids\nnumpy.numpy.ndarray\nA 2D numpy array representing fixed effects, with a shape of (n_samples, n_features). Elements should be non-negative integers representing fixed effect identifiers.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnumpy.numpy.ndarray\nA boolean array of shape (n_samples,), indicating which observations have a singleton fixed effect.\n\n\n\n\n\n\nThe algorithm iterates over columns to identify fixed effects. After each column is processed, it updates the record of non-singleton rows. This approach accounts for the possibility that removing an observation in one column can lead to the emergence of new singletons in subsequent columns.\nFor performance reasons, the input array should be in column-major order. Operating on a row-major array can lead to significant performance losses."
  },
  {
    "objectID": "reference/did.estimation.did2s.html",
    "href": "reference/did.estimation.did2s.html",
    "title": "",
    "section": "",
    "text": "did.estimation.did2s(data, yname, first_stage, second_stage, treatment, cluster, i_ref1=None, i_ref2=None)\nEstimate a Difference-in-Differences model using Gardner’s two-step DID2S estimator.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nThe DataFrame containing all variables.\nrequired\n\n\nyname\nstr\nThe name of the dependent variable.\nrequired\n\n\nfirst_stage\nstr\nThe formula for the first stage, starting with ‘~’.\nrequired\n\n\nsecond_stage\nstr\nThe formula for the second stage, starting with ‘~’.\nrequired\n\n\ntreatment\nstr\nThe name of the treatment variable.\nrequired\n\n\ncluster\nstr\nThe name of the cluster variable.\nrequired\n\n\ni_ref1\n(int, str, list)\nThe reference value(s) for the first variable used with “i()” syntax in the second stage formula. Default is None.\nNone\n\n\ni_ref2\n(int, str, list)\nThe reference value(s) for the second variable used with “i()” syntax in the second stage formula. Default is None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nA fitted model object of class [Feols(/reference/Feols.qmd).\n\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nfrom pyfixest.did.estimation import did2s\n\nurl = \"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\ndf_het.head()\n\n\n      You have loaded the 'pyfixest.did' module. While every function is tested in `tests/test_did.py`,\n      the module is not yet as thoroughly tested as I would like. So please use it with caution and\n      provide feedback in case you stumble over any bugs!\n      \n\n\n\n            \n            \n            \n\n\n\n\n\n\n  \n    \n      \n      unit\n      state\n      group\n      unit_fe\n      g\n      year\n      year_fe\n      treat\n      rel_year\n      rel_year_binned\n      error\n      te\n      te_dynamic\n      dep_var\n    \n  \n  \n    \n      0\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1990\n      0.066159\n      False\n      -20.0\n      -6\n      -0.086466\n      0\n      0.0\n      7.022709\n    \n    \n      1\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1991\n      -0.030980\n      False\n      -19.0\n      -6\n      0.766593\n      0\n      0.0\n      7.778628\n    \n    \n      2\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1992\n      -0.119607\n      False\n      -18.0\n      -6\n      1.512968\n      0\n      0.0\n      8.436377\n    \n    \n      3\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1993\n      0.126321\n      False\n      -17.0\n      -6\n      0.021870\n      0\n      0.0\n      7.191207\n    \n    \n      4\n      1\n      33\n      Group 2\n      7.043016\n      2010\n      1994\n      -0.106921\n      False\n      -16.0\n      -6\n      -0.017603\n      0\n      0.0\n      6.918492\n    \n  \n\n\n\n\nIn a first step, we estimate a classical event study model:\n\n# estimate the model\nfit = did2s(\n    df_het,\n    yname=\"dep_var\",\n    first_stage=\"~ 0 | unit + year\",\n    second_stage=\"~i(rel_year)\",\n    treatment=\"treat\",\n    cluster=\"state\",\n    i_ref1=[-1.0, np.inf],\n)\n\nfit.tidy().head()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      C(rel_year,contr.treatment(base=-1.0))[T.-20.0]\n      -0.058226\n      0.035809\n      -1.626011\n      0.103954\n      -0.128412\n      0.011960\n    \n    \n      C(rel_year,contr.treatment(base=-1.0))[T.-19.0]\n      -0.006032\n      0.030341\n      -0.198816\n      0.842408\n      -0.065500\n      0.053436\n    \n    \n      C(rel_year,contr.treatment(base=-1.0))[T.-18.0]\n      -0.006152\n      0.035094\n      -0.175310\n      0.860837\n      -0.074937\n      0.062632\n    \n    \n      C(rel_year,contr.treatment(base=-1.0))[T.-17.0]\n      -0.012533\n      0.024834\n      -0.504689\n      0.613780\n      -0.061208\n      0.036141\n    \n    \n      C(rel_year,contr.treatment(base=-1.0))[T.-16.0]\n      -0.034698\n      0.029806\n      -1.164128\n      0.244378\n      -0.093117\n      0.023722\n    \n  \n\n\n\n\nWe can also inspect the model visually:\n\nfit.iplot(figsize= [1200, 400], coord_flip=False).show()\n\n   \n   \n\n\nTo estimate a pooled effect, we need to slightly update the second stage formula:\n\nfit = did2s(\n    df_het,\n    yname=\"dep_var\",\n    first_stage=\"~ 0 | unit + year\",\n    second_stage=\"~i(treat)\",\n    treatment=\"treat\",\n    cluster=\"state\"\n)\nfit.tidy().head()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      C(treat)[T.True]\n      2.230482\n      0.024709\n      90.271437\n      0.0\n      2.182052\n      2.278911"
  },
  {
    "objectID": "reference/did.estimation.event_study.html",
    "href": "reference/did.estimation.event_study.html",
    "title": "",
    "section": "",
    "text": "did.estimation.event_study(data, yname, idname, tname, gname, xfml=None, estimator='twfe', att=True, cluster='idname')\nFunction for Event Study Estimation.\nThis function allows for the estimation of treatment effects using different estimators. Currently, it supports “twfe” for the two-way fixed effects estimator and “did2s” for Gardner’s two-step DID2S estimator. Other estimators are in development.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\nDataFrame\nThe DataFrame containing all variables.\nrequired\n\n\nyname\nstr\nThe name of the dependent variable.\nrequired\n\n\nidname\nstr\nThe name of the id variable.\nrequired\n\n\ntname\nstr\nVariable name for calendar period.\nrequired\n\n\ngname\nstr\nUnit-specific time of initial treatment.\nrequired\n\n\nxfml\nstr\nThe formula for the covariates.\nNone\n\n\nestimator\nstr\nThe estimator to use. Options are “did2s” and “twfe”.\n'twfe'\n\n\natt\nbool\nIf True, estimates the average treatment effect on the treated (ATT). If False, estimates the canonical event study design with all leads and lags. Default is True.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nA fitted model object of class [Feols(/reference/Feols.qmd).\n\n\n\n\n\n\n\nimport pandas as pd\nfrom pyfixest.did.estimation import event_study\n\nurl = \"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\n\nfit_twfe = event_study(\n    df_het,\n    yname=\"dep_var\",\n    idname=\"unit\",\n    tname=\"year\",\n    gname=\"g\",\n    estimator=\"twfe\",\n    att=True,\n)\n\nfit_twfe.tidy()\n\n\n      You have loaded the 'pyfixest.did' module. While every function is tested in `tests/test_did.py`,\n      the module is not yet as thoroughly tested as I would like. So please use it with caution and\n      provide feedback in case you stumble over any bugs!\n      \n\n\n\n            \n            \n            \n\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      ATT\n      1.98254\n      0.019093\n      103.83491\n      0.0\n      1.945118\n      2.019962"
  },
  {
    "objectID": "reference/did.estimation.lpdid.html",
    "href": "reference/did.estimation.lpdid.html",
    "title": "",
    "section": "",
    "text": "did.estimation.lpdid(data, yname, idname, tname, gname, vcov=None, pre_window=None, post_window=None, never_treated=0, att=True, xfml=None)\nEstimate a Difference-in-Differences / Event Study Model via the Local Projections Approach.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\nDataFrame\nThe DataFrame containing all variables.\nrequired\n\n\nyname\nstr\nThe name of the dependent variable.\nrequired\n\n\nidname\nstr\nThe name of the id variable.\nrequired\n\n\ntname\nstr\nVariable name for calendar period.\nrequired\n\n\ngname\nstr\nUnit-specific time of initial treatment.\nrequired\n\n\nvcov\n(str, dict)\nThe type of inference to employ. Defaults to {“CRV1”: idname}. Options include “iid”, “hetero”, or a dictionary like {“CRV1”: idname}.\nNone\n\n\npre_window\nint\nThe number of periods before the treatment to include in the estimation. Default is the minimum relative year in the data.\nNone\n\n\npost_window\nint\nThe number of periods after the treatment to include in the estimation. Default is the maximum relative year in the data.\nNone\n\n\nnever_treated\nint\nValue in gname indicating units never treated. Default is 0.\n0\n\n\natt\nbool\nIf True, estimates the pooled average treatment effect on the treated (ATT). Default is False.\nTrue\n\n\nxfml\nstr\nFormula for the covariates. Not yet supported.\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nDataFrame\nA DataFrame with the estimated coefficients.\n\n\n\n\n\n\n\nimport pandas as pd\nfrom pyfixest.did.estimation import lpdid\n\nurl = \"https://raw.githubusercontent.com/s3alfisc/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\n\nfit = lpdid(\n    df_het,\n    yname=\"dep_var\",\n    idname=\"unit\",\n    tname=\"year\",\n    gname=\"g\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=False\n)\n\nfit.tidy().head()\nfit.iplot(figsize= [1200, 400], coord_flip=False).show()\n\n\n      You have loaded the 'pyfixest.did' module. While every function is tested in `tests/test_did.py`,\n      the module is not yet as thoroughly tested as I would like. So please use it with caution and\n      provide feedback in case you stumble over any bugs!\n      \n\n\n\n            \n            \n            \n\n\n   \n   \n\n\nTo get the ATT, set att=True:\n\nfit = lpdid(\n    df_het,\n    yname=\"dep_var\",\n    idname=\"unit\",\n    tname=\"year\",\n    gname=\"g\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=True\n)\nfit.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n      N\n    \n  \n  \n    \n      treat_diff\n      2.506746\n      0.071357\n      35.129648\n      0.0\n      2.362413\n      2.65108\n      5716.0"
  },
  {
    "objectID": "reference/estimation.feols.html",
    "href": "reference/estimation.feols.html",
    "title": "",
    "section": "",
    "text": "estimation.feols(fml, data, vcov=None, weights=None, ssc=ssc(), fixef_rm='none', collin_tol=1e-10, drop_intercept=False, i_ref1=None, i_ref2=None)\nEstimate a linear regression models with fixed effects using fixest formula syntax.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfml\nstr\nA three-sided formula string using fixest formula syntax. Syntax: “Y ~ X1 + X2 | FE1 + FE2 | X1 ~ Z1”. “|” separates dependent variable, fixed effects, and instruments. Special syntax includes stepwise regressions, cumulative stepwise regression, multiple dependent variables, interaction of variables (i(X1,X2)), and interacted fixed effects (fe1^fe2).\nrequired\n\n\ndata\npyfixest.dev_utils.DataFrameType\nA pandas or polars dataframe containing the variables in the formula.\nrequired\n\n\nvcov\ntyping.Union[str, dict[str, str]]\nType of variance-covariance matrix for inference. Options include “iid”, “hetero”, “HC1”, “HC2”, “HC3”, or a dictionary for CRV1/CRV3 inference.\nNone\n\n\nweights\nUnion[None, str], optional. Default is None. Weights for WLS estimation. If None, all observations are weighted equally. If a string, the name of the column in data that contains the weights.\n\nNone\n\n\nssc\nstr\nA ssc object specifying the small sample correction for inference.\nssc()\n\n\nfixef_rm\nstr\nSpecifies whether to drop singleton fixed effects. Options: “none” (default), “singleton”.\n'none'\n\n\ncollin_tol\nfloat\nTolerance for collinearity check, by default 1e-06.\n1e-10\n\n\ndrop_intercept\nbool\nWhether to drop the intercept from the model, by default False.\nFalse\n\n\ni_ref1\ntyping.Optional[typing.Union[list, str]]\nReference category for the first set of categorical variables interacted via “i()”, by default None.\nNone\n\n\ni_ref2\ntyping.Optional[typing.Union[list, str]]\nReference category for the second set of categorical variables interacted via “i()”, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nAn instance of the [Feols(/reference/Feols.qmd) class or FixestMulti class for multiple models specified via fml.\n\n\n\n\n\n\nAs in fixest, the [Feols(/reference/Feols.qmd) function can be used to estimate a simple linear regression model with fixed effects. The following example regresses Y on X1 and X2 with fixed effects for f1 and f2: fixed effects are specified after the | symbol.\n\nfrom pyfixest.estimation import feols\nfrom pyfixest.utils import get_data\nfrom pyfixest.summarize import etable\n\ndata = get_data()\n\nfit = feols(\"Y ~ X1 + X2 | f1 + f2\", data)\nfit.summary()\n\n\n            \n            \n            \n\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.924 |        0.061 |   -15.165 |      0.000 |  -1.049 |   -0.799 |\n| X2            |     -0.174 |        0.015 |   -11.918 |      0.000 |  -0.204 |   -0.144 |\n---\nRMSE: 1.346   R2: 0.659   R2 Within: 0.303\n\n\nCalling feols() returns an instance of the [Feols(/reference/Feols.qmd) class. The summary() method can be used to print the results.\nAn alternative way to retrieve model results is via the tidy() method, which returns a pandas dataframe with the estimated coefficients, standard errors, t-statistics, and p-values.\n\nfit.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      X1\n      -0.924046\n      0.060934\n      -15.164621\n      2.664535e-15\n      -1.048671\n      -0.799421\n    \n    \n      X2\n      -0.174107\n      0.014608\n      -11.918277\n      1.069367e-12\n      -0.203985\n      -0.144230\n    \n  \n\n\n\n\nYou can also access all elements in the tidy data frame by dedicated methods, e.g. fit.coef() for the coefficients, fit.se() for the standard errors, fit.tstat() for the t-statistics, and fit.pval() for the p-values, and fit.confint() for the confidence intervals.\nThe employed type of inference can be specified via the vcov argument. If vcov is not provided, PyFixest employs the fixest default of iid inference, unless there are fixed effects in the model, in which case feols() clusters the standard error by the first fixed effect (CRV1 inference).\n\nfit1 = feols(\"Y ~ X1 + X2 | f1 + f2\", data, vcov=\"iid\")\nfit2 = feols(\"Y ~ X1 + X2 | f1 + f2\", data, vcov=\"hetero\")\nfit3 = feols(\"Y ~ X1 + X2 | f1 + f2\", data, vcov={\"CRV1\": \"f1\"})\n\nSupported inference types are “iid”, “hetero”, “HC1”, “HC2”, “HC3”, and “CRV1”/“CRV3”. Clustered standard errors are specified via a dictionary, e.g. {\"CRV1\": \"f1\"} for CRV1 inference with clustering by f1 or {\"CRV3\": \"f1\"} for CRV3 inference with clustering by f1. For two-way clustering, you can provide a formula string, e.g. {\"CRV1\": \"f1 + f2\"} for CRV1 inference with clustering by f1.\n\nfit4 = feols(\"Y ~ X1 + X2 | f1 + f2\", data, vcov={\"CRV1\": \"f1 + f2\"})\n\nInference can be adjusted post estimation via the vcov method:\n\nfit.summary()\nfit.vcov(\"iid\").summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.924 |        0.061 |   -15.165 |      0.000 |  -1.049 |   -0.799 |\n| X2            |     -0.174 |        0.015 |   -11.918 |      0.000 |  -0.204 |   -0.144 |\n---\nRMSE: 1.346   R2: 0.659   R2 Within: 0.303\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  iid\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.924 |        0.054 |   -16.995 |      0.000 |  -1.031 |   -0.817 |\n| X2            |     -0.174 |        0.014 |   -12.081 |      0.000 |  -0.202 |   -0.146 |\n---\nRMSE: 1.346   R2: 0.659   R2 Within: 0.303\n\n\nThe ssc argument specifies the small sample correction for inference. In general, feols() uses all of fixest::feols() defaults, but sets the fixef.K argument to \"none\" whereas the fixest::feols() default is \"nested\". See here for more details: link to github.\nfeols() supports a range of multiple estimation syntax, i.e. you can estimate multiple models in one call. The following example estimates two models, one with fixed effects for f1 and one with fixed effects for f2 using the sw() syntax.\n\nfit = feols(\"Y ~ X1 + X2 | sw(f1, f2)\", data)\ntype(fit)\n\npyfixest.FixestMulti.FixestMulti\n\n\nThe returned object is an instance of the FixestMulti class. You can access the results of the first model via fit.fetch_model(0) and the results of the second model via fit.fetch_model(1). You can compare the model results via the etable() function:\n\netable([fit.fetch_model(0), fit.fetch_model(1)])\n\nModel:  Y~X1+X2|f1\nModel:  Y~X1+X2|f2\n                           est1               est2\n------------  -----------------  -----------------\ndepvar                        Y                  Y\n--------------------------------------------------\nX1             -0.95*** (0.067)  -0.979*** (0.077)\nX2            -0.174*** (0.018)  -0.175*** (0.022)\n--------------------------------------------------\nf1                            x                  -\nf2                            -                  x\n--------------------------------------------------\nR2                        0.489              0.354\nS.E. type                by: f1             by: f2\nObservations                997                998\n--------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\nOther supported multiple estimation syntax include sw0(), csw() and csw0(). While sw() adds variables in a “stepwise” fashinon, csw() does so cumulatively.\n\nfit = feols(\"Y ~ X1 + X2 | csw(f1, f2)\", data)\netable([fit.fetch_model(0), fit.fetch_model(1)])\n\nModel:  Y~X1+X2|f1\nModel:  Y~X1+X2|f1+f2\n                           est1               est2\n------------  -----------------  -----------------\ndepvar                        Y                  Y\n--------------------------------------------------\nX1             -0.95*** (0.067)  -0.924*** (0.061)\nX2            -0.174*** (0.018)  -0.174*** (0.015)\n--------------------------------------------------\nf1                            x                  x\nf2                            -                  x\n--------------------------------------------------\nR2                        0.489              0.659\nS.E. type                by: f1             by: f1\nObservations                997                997\n--------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\nThe sw0() and csw0() syntax are similar to sw() and csw(), but start with a model that exludes the variables specified in sw() and csw():\n\nfit = feols(\"Y ~ X1 + X2 | sw0(f1, f2)\", data)\netable([fit.fetch_model(0), fit.fetch_model(1), fit.fetch_model(2)])\n\nModel:  Y~X1+X2\nModel:  Y~X1+X2|f1\nModel:  Y~X1+X2|f2\n\n\n                           est1               est2               est3\n------------  -----------------  -----------------  -----------------\ndepvar                        Y                  Y                  Y\n---------------------------------------------------------------------\nIntercept      0.889*** (0.108)\nX1            -0.993*** (0.082)   -0.95*** (0.067)  -0.979*** (0.077)\nX2            -0.176*** (0.022)  -0.174*** (0.018)  -0.175*** (0.022)\n---------------------------------------------------------------------\nf1                            -                  x                  -\nf2                            -                  -                  x\n---------------------------------------------------------------------\nR2                        0.177              0.489              0.354\nS.E. type                   iid             by: f1             by: f2\nObservations                998                997                998\n---------------------------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\nThe feols() function also supports multiple dependent variables. The following example estimates two models, one with Y1 as the dependent variable and one with Y2 as the dependent variable.\n\nfit = feols(\"Y + Y2 ~ X1 | f1 + f2\", data)\netable([fit.fetch_model(0), fit.fetch_model(1)])\n\nModel:  Y~X1|f1+f2\nModel:  Y2~X1|f1+f2\n                           est1               est2\n------------  -----------------  -----------------\ndepvar                        Y                 Y2\n--------------------------------------------------\nX1            -0.919*** (0.065)  -1.228*** (0.195)\n--------------------------------------------------\nf1                            x                  x\nf2                            x                  x\n--------------------------------------------------\nR2                        0.609              0.168\nS.E. type                by: f1             by: f1\nObservations                997                998\n--------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\nIt is possible to combine different multiple estimation operators:\n\nfit = feols(\"Y + Y2 ~ X1 | sw(f1, f2)\", data)\netable([fit.fetch_model(0), fit.fetch_model(1), fit.fetch_model(2), fit.fetch_model(3)])\n\nModel:  Y~X1|f1\nModel:  Y2~X1|f1\nModel:  Y~X1|f2\nModel:  Y2~X1|f2\n                           est1               est2               est3               est4\n------------  -----------------  -----------------  -----------------  -----------------\ndepvar                        Y                 Y2                  Y                 Y2\n----------------------------------------------------------------------------------------\nX1            -0.949*** (0.069)  -1.266*** (0.176)  -0.982*** (0.081)  -1.301*** (0.205)\n----------------------------------------------------------------------------------------\nf1                            x                  x                  -                  -\nf2                            -                  -                  x                  x\n----------------------------------------------------------------------------------------\nR2                        0.437              0.115              0.302               0.09\nS.E. type                by: f1             by: f1             by: f2             by: f2\nObservations                997                998                998                999\n----------------------------------------------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n\n\nIn general, using muliple estimation syntax can improve the estimation time as covariates that are demeaned in one model and are used in another model do not need to be demeaned again: feols() implements a caching mechanism that stores the demeaned covariates.\nBesides OLS, feols() also supports IV estimation via three part formulas:\n\nfit = feols(\"Y ~  X2 | f1 + f2 | X1 ~ Z1\", data)\nfit.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      X1\n      -1.050097\n      0.085493\n      -12.282912\n      5.133671e-13\n      -1.224949\n      -0.875245\n    \n    \n      X2\n      -0.174351\n      0.014779\n      -11.797039\n      1.369793e-12\n      -0.204578\n      -0.144124\n    \n  \n\n\n\n\nHere, X1 is the endogenous variable and Z1 is the instrument. f1 and f2 are the fixed effects, as before. To estimate IV models without fixed effects, simply omit the fixed effects part of the formula:\n\nfit = feols(\"Y ~  X2 | X1 ~ Z1\", data)\nfit.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Intercept\n      0.861939\n      0.151187\n      5.701137\n      1.567858e-08\n      0.565257\n      1.158622\n    \n    \n      X1\n      -0.967238\n      0.130078\n      -7.435847\n      2.238210e-13\n      -1.222497\n      -0.711980\n    \n    \n      X2\n      -0.176416\n      0.021769\n      -8.104001\n      1.554312e-15\n      -0.219134\n      -0.133697\n    \n  \n\n\n\n\nLast, feols() supports interaction of variables via the i() syntax. Documentation on this is tba.\nAfter fitting a model via feols(), you can use the predict() method to get the predicted values:\n\nfit = feols(\"Y ~ X1 + X2 | f1 + f2\", data)\nfit.predict()[0:5]\n\narray([ 3.0633663 , -0.69574133, -0.91240433, -0.46370257, -1.67331154])\n\n\nThe predict() method also supports a newdata argument to predict on new data, which returns a numpy array of the predicted values:\n\nfit = feols(\"Y ~ X1 + X2 | f1 + f2\", data)\nfit.predict(newdata=data)[0:5]\n\narray([ 2.14598765,         nan,         nan,  3.0633663 , -0.69574133])\n\n\nLast, you can plot the results of a model via the coefplot() method:\n\nfit = feols(\"Y ~ X1 + X2 | f1 + f2\", data)\nfit.coefplot()"
  },
  {
    "objectID": "reference/estimation.fepois.html",
    "href": "reference/estimation.fepois.html",
    "title": "",
    "section": "",
    "text": "estimation.fepois(fml, data, vcov=None, ssc=ssc(), fixef_rm='none', iwls_tol=1e-08, iwls_maxiter=25, collin_tol=1e-10, drop_intercept=False, i_ref1=None, i_ref2=None)\nEstimate Poisson regression models with fixed effects using the pplmhdfe algorithm.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfml\nstr\nA two-sided formula string using fixest formula syntax. Syntax: “Y ~ X1 + X2 | FE1 + FE2”. “|” separates left-hand side and fixed effects. Special syntax includes: - Stepwise regressions (sw, sw0) - Cumulative stepwise regression (csw, csw0) - Multiple dependent variables (Y1 + Y2 ~ X) - Interaction of variables (i(X1,X2)) - Interacted fixed effects (fe1^fe2) Compatible with formula parsing via the formulaic module.\nrequired\n\n\ndata\npyfixest.dev_utils.DataFrameType\nA pandas or polars dataframe containing the variables in the formula.\nrequired\n\n\nvcov\ntyping.Union[str, dict[str, str]]\nType of variance-covariance matrix for inference. Options include “iid”, “hetero”, “HC1”, “HC2”, “HC3”, or a dictionary for CRV1/CRV3 inference.\nNone\n\n\nssc\nstr\nA ssc object specifying the small sample correction for inference.\nssc()\n\n\nfixef_rm\nstr\nSpecifies whether to drop singleton fixed effects. Options: “none” (default), “singleton”.\n'none'\n\n\niwls_tol\ntyping.Optional[float]\nTolerance for IWLS convergence, by default 1e-08.\n1e-08\n\n\niwls_maxiter\ntyping.Optional[float]\nMaximum number of iterations for IWLS convergence, by default 25.\n25\n\n\ncollin_tol\nfloat\nTolerance for collinearity check, by default 1e-06.\n1e-10\n\n\ndrop_intercept\nbool\nWhether to drop the intercept from the model, by default False.\nFalse\n\n\ni_ref1\ntyping.Optional[typing.Union[list, str]]\nReference category for the first set of categorical variables interacted via “i()”, by default None.\nNone\n\n\ni_ref2\ntyping.Optional[typing.Union[list, str]]\nReference category for the second set of categorical variables interacted via “i()”, by default None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nAn instance of the Fepois class or an instance of class FixestMulti for multiple models specified via fml.\n\n\n\n\n\n\nThe fepois() function can be used to estimate a simple Poisson regression model with fixed effects. The following example regresses Y on X1 and X2 with fixed effects for f1 and f2: fixed effects are specified after the | symbol.\n\nfrom pyfixest.estimation import fepois\nfrom pyfixest.utils import get_data\nfrom pyfixest.summarize import etable\n\ndata = get_data(model = \"Fepois\")\nfit = fepois(\"Y ~ X1 + X2 | f1 + f2\", data)\nfit.summary()\n\n\n            \n            \n            \n\n\n###\n\nEstimation:  Poisson\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.008 |        0.035 |    -0.239 |      0.811 |  -0.076 |    0.060 |\n| X2            |     -0.015 |        0.010 |    -1.471 |      0.141 |  -0.035 |    0.005 |\n---\nDeviance: 1068.836\n\n\nFor more examples, please take a look at the documentation of the feols() function."
  },
  {
    "objectID": "reference/feiv.Feiv.html",
    "href": "reference/feiv.Feiv.html",
    "title": "",
    "section": "",
    "text": "feiv.Feiv(self, Y, X, Z, weights, coefnames_x, coefnames_z, collin_tol, weights_name)\nNon user-facing class to estimate an IV model using a 2SLS estimator.\nInherits from the Feols class. Users should not directly instantiate this class, but rather use the feols() function. Note that no demeaning is performed in this class: demeaning is performed in the FixestMulti class (to allow for caching of demeaned variables for multiple estimation).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nY\nnumpy.numpy.ndarray\nDependent variable, a two-dimensional np.array.\nrequired\n\n\nX\nnumpy.numpy.ndarray\nIndependent variables, a two-dimensional np.array.\nrequired\n\n\nZ\nnumpy.numpy.ndarray\nInstruments, a two-dimensional np.array.\nrequired\n\n\nweights\nnumpy.numpy.ndarray\nWeights, a one-dimensional np.array.\nrequired\n\n\ncoefnames_x\nlist\nNames of the coefficients of X.\nrequired\n\n\ncoefnames_z\nlist\nNames of the coefficients of Z.\nrequired\n\n\ncollin_tol\nfloat\nTolerance for collinearity check.\nrequired\n\n\nweights_name\ntyping.Optional[str]\nName of the weights variable.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n_Z\nnumpy.numpy.ndarray\nProcessed instruments after handling multicollinearity.\n\n\n_coefnames_z\nlist\nNames of coefficients for Z after handling multicollinearity.\n\n\n_collin_vars_z\nlist\nVariables identified as collinear in Z.\n\n\n_collin_index_z\nlist\nIndices of collinear variables in Z.\n\n\n_is_iv\nbool\nIndicator if instrumental variables are used.\n\n\n_support_crv3_inference\nbool\nIndicator for supporting CRV3 inference.\n\n\n_support_iid_inference\nbool\nIndicator for supporting IID inference.\n\n\n_tZX\nnumpy.numpy.ndarray\nTranspose of Z times X.\n\n\n_tXZ\nnumpy.numpy.ndarray\nTranspose of X times Z.\n\n\n_tZy\nnumpy.numpy.ndarray\nTranspose of Z times Y.\n\n\n_tZZinv\nnumpy.numpy.ndarray\nInverse of transpose of Z times Z.\n\n\n_beta_hat\nnumpy.numpy.ndarray\nEstimated regression coefficients.\n\n\n_Y_hat_link\nnumpy.numpy.ndarray\nPredicted values of the regression model.\n\n\n_u_hat\nnumpy.numpy.ndarray\nResiduals of the regression model.\n\n\n_scores\nnumpy.numpy.ndarray\nScores used in the regression.\n\n\n_hessian\nnumpy.numpy.ndarray\nHessian matrix used in the regression.\n\n\n_bread\nnumpy.numpy.ndarray\nBread matrix used in the regression.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nValueError\nIf Z is not a two-dimensional array."
  },
  {
    "objectID": "reference/feols.Feols.html",
    "href": "reference/feols.Feols.html",
    "title": "",
    "section": "",
    "text": "feols.Feols(self, Y, X, weights, collin_tol, coefnames, weights_name)\nNon user-facing class to estimate an IV model using a 2SLS estimator.\nInherits from the Feols class. Users should not directly instantiate this class, but rather use the feols() function. Note that no demeaning is performed in this class: demeaning is performed in the FixestMulti class (to allow for caching of demeaned variables for multiple estimation).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nY\nnumpy.numpy.ndarray\nDependent variable, a two-dimensional numpy array.\nrequired\n\n\nX\nnumpy.numpy.ndarray\nIndependent variables, a two-dimensional numpy array.\nrequired\n\n\nweights\nnumpy.numpy.ndarray\nWeights, a one-dimensional numpy array.\nrequired\n\n\ncollin_tol\nfloat\nTolerance level for collinearity checks.\nrequired\n\n\ncoefnames\ntyping.List[str]\nNames of the coefficients (of the design matrix X).\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\n_method\nstr\nSpecifies the method used for regression, set to “feols”.\n\n\n_is_iv\nbool\nIndicates whether instrumental variables are used, initialized as False.\n\n\n_Y\nnumpy.numpy.ndarray\nThe dependent variable array.\n\n\n_X\nnumpy.numpy.ndarray\nThe independent variables array.\n\n\n_X_is_empty\nbool\nIndicates whether the X array is empty.\n\n\n_collin_tol\nfloat\nTolerance level for collinearity checks.\n\n\n_coefnames\nlist\nNames of the coefficients (of the design matrix X).\n\n\n_collin_vars\nlist\nVariables identified as collinear.\n\n\n_collin_index\nlist\nIndices of collinear variables.\n\n\n_Z\nnumpy.numpy.ndarray\nAlias for the _X array, used for calculations.\n\n\n_weights\nnumpy.numpy.ndarray\nArray of weights for each observation.\n\n\n_N\nint\nNumber of observations.\n\n\n_k\nint\nNumber of independent variables (or features).\n\n\n_support_crv3_inference\nbool\nIndicates support for CRV3 inference.\n\n\n_support_iid_inference\nbool\nIndicates support for IID inference.\n\n\n_data\nAny\nData used in the regression, to be enriched outside of the class.\n\n\n_fml\nAny\nFormula used in the regression, to be enriched outside of the class.\n\n\n_has_fixef\nbool\nIndicates whether fixed effects are used.\n\n\n_fixef\nAny\nFixed effects used in the regression.\n\n\n_icovars\nAny\nInternal covariates, to be enriched outside of the class.\n\n\n_ssc_dict\ndict\nDictionary for sum of squares and cross products matrices.\n\n\n_tZX\nnumpy.numpy.ndarray\nTranspose of Z multiplied by X, set in get_fit().\n\n\n_tXZ\nnumpy.numpy.ndarray\nTranspose of X multiplied by Z, set in get_fit().\n\n\n_tZy\nnumpy.numpy.ndarray\nTranspose of Z multiplied by Y, set in get_fit().\n\n\n_tZZinv\nnumpy.numpy.ndarray\nInverse of the transpose of Z multiplied by Z, set in get_fit().\n\n\n_beta_hat\nnumpy.numpy.ndarray\nEstimated regression coefficients.\n\n\n_Y_hat_link\nnumpy.numpy.ndarray\nPredicted values of the dependent variable.\n\n\n_Y_hat_response\nnumpy.numpy.ndarray\nResponse predictions of the model.\n\n\n_u_hat\nnumpy.numpy.ndarray\nResiduals of the regression model.\n\n\n_scores\nnumpy.numpy.ndarray\nScores used in the regression analysis.\n\n\n_hessian\nnumpy.numpy.ndarray\nHessian matrix used in the regression.\n\n\n_bread\nnumpy.numpy.ndarray\nBread matrix, used in calculating the variance-covariance matrix.\n\n\n_vcov_type\nAny\nType of variance-covariance matrix used.\n\n\n_vcov_type_detail\nAny\nDetailed specification of the variance-covariance matrix type.\n\n\n_is_clustered\nbool\nIndicates if clustering is used in the variance-covariance calculation.\n\n\n_clustervar\nAny\nVariable used for clustering in the variance-covariance calculation.\n\n\n_G\nAny\nGroup information used in clustering.\n\n\n_ssc\nAny\nSum of squares and cross products matrix.\n\n\n_vcov\nnumpy.numpy.ndarray\nVariance-covariance matrix of the estimated coefficients.\n\n\n_se\nnumpy.numpy.ndarray\nStandard errors of the estimated coefficients.\n\n\n_tstat\nnumpy.numpy.ndarray\nT-statistics of the estimated coefficients.\n\n\n_pvalue\nnumpy.numpy.ndarray\nP-values associated with the t-statistics.\n\n\n_conf_int\nnumpy.numpy.ndarray\nConfidence intervals for the estimated coefficients.\n\n\n_F_stat\nAny\nF-statistic for the model, set in get_Ftest().\n\n\n_fixef_dict\ndict\nDictionary containing fixed effects estimates.\n\n\n_sumFE\nnumpy.numpy.ndarray\nSum of all fixed effects for each observation.\n\n\n_rmse\nfloat\nRoot mean squared error of the model.\n\n\n_r2\nfloat\nR-squared value of the model.\n\n\n_r2_within\nfloat\nR-squared value computed on demeaned dependent variable.\n\n\n_adj_r2\nfloat\nAdjusted R-squared value of the model.\n\n\n_adj_r2_within\nfloat\nAdjusted R-squared value computed on demeaned dependent variable.\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_fixest_multi_context\nEnrich an instance of class [Feols(/reference/Feols.qmd) with additional attributes set in the FixestMulti class.\n\n\ncoef\n\n\n\ncoefplot\nCreate a coefficient plot to visualize model coefficients.\n\n\nconfint\n\n\n\nfixef\nCompute the coefficients of (swept out) fixed effects for a regression model.\n\n\nget_inference\nCompute standard errors, t-statistics, and p-values for the regression model.\n\n\nget_nobs\nFetch the number of observations used in fitting the regression model.\n\n\nget_performance\nCompute multiple additional measures commonly reported with linear regression output,\n\n\niplot\nCreate coefficient plots for variables interacted via i() syntax.\n\n\npredict\nReturn a flat np.array with predicted values of the regression model.\n\n\npvalue\n\n\n\nresid\n\n\n\nse\n\n\n\nsummary\n\n\n\ntidy\nReturn a tidy pd.DataFrame with the point estimates, standard errors, t statistics, and p-values.\n\n\ntstat\n\n\n\nvcov\nCompute covariance matrices for an estimated regression model.\n\n\nwald_test\nCompute a Wald test for a linear hypothesis of the form Rb = q. By default, tests the joint null\n\n\nwildboottest\nRun a wild cluster bootstrap based on an object of type “Feols”.\n\n\n\n\n\nfeols.Feols.add_fixest_multi_context(fml, depvar, Y, _data, _ssc_dict, _k_fe, fval, na_index)\nEnrich an instance of class [Feols(/reference/Feols.qmd) with additional attributes set in the FixestMulti class.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfml\nstr\nThe formula used for estimation.\nrequired\n\n\ndepvar\nstr\nThe dependent variable of the regression model.\nrequired\n\n\nY\npandas.pandas.Series\nThe dependent variable of the regression model.\nrequired\n\n\n_data\npandas.pandas.DataFrame\nThe data used for estimation.\nrequired\n\n\n_ssc_dict\ndict\nA dictionary with the sum of squares and cross products matrices.\nrequired\n\n\n_k_fe\nint\nThe number of fixed effects.\nrequired\n\n\nfval\nstr\nThe fixed effects formula.\nrequired\n\n\nna_index\nnumpy.numpy.ndarray\nAn array with the indices of missing values.\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfeols.Feols.coef()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.Series\nA pd.Series with the estimated coefficients of the regression model.\n\n\n\n\n\n\n\nfeols.Feols.coefplot(alpha=0.05, figsize=(500, 300), yintercept=0, xintercept=None, rotate_xticks=0, coefficients=None, title=None, coord_flip=True)\nCreate a coefficient plot to visualize model coefficients.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nSignificance level for highlighting significant coefficients. Defaults to None.\n0.05\n\n\nfigsize\ntyping.Tuple[int, int]\nSize of the plot (width, height) in inches. Defaults to None.\n(500, 300)\n\n\nyintercept\nfloat\nValue to set as the y-axis intercept (vertical line). Defaults to None.\n0\n\n\nxintercept\nfloat\nValue to set as the x-axis intercept (horizontal line). Defaults to None.\nNone\n\n\nrotate_xticks\nint\nRotation angle for x-axis tick labels. Defaults to None.\n0\n\n\ncoefficients\ntyping.List[str]\nList of coefficients to include in the plot. If None, all coefficients are included.\nNone\n\n\ntitle\nstr\nTitle of the plot. Defaults to None.\nNone\n\n\ncoord_flip\nbool\nWhether to flip the coordinates of the plot. Defaults to None.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlets-plot figure\nA lets-plot figure with coefficient estimates and confidence intervals.\n\n\n\n\n\n\n\nfeols.Feols.confint()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\nA pd.DataFrame with confidence intervals of the estimated regression model.\n\n\n\n\n\n\n\nfeols.Feols.fixef()\nCompute the coefficients of (swept out) fixed effects for a regression model.\nThis method creates the following attributes: - alphaDF (pd.DataFrame): A DataFrame with the estimated fixed effects. - sumFE (np.array): An array with the sum of fixed effects for each observation (i = 1, …, N).\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfeols.Feols.get_inference(alpha=0.95)\nCompute standard errors, t-statistics, and p-values for the regression model.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nThe significance level for confidence intervals. Defaults to 0.95.\n0.95\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfeols.Feols.get_nobs()\nFetch the number of observations used in fitting the regression model.\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfeols.Feols.get_performance()\nCompute multiple additional measures commonly reported with linear regression output, including R-squared and adjusted R-squared. Note that variables with the suffix _within use demeaned dependent variables Y, while variables without do not or are invariant to demeaning.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\nCreates the following instances:\n\n\n\n- r2 (float): R-squared of the regression model.\n\n\n\n- adj_r2 (float): Adjusted R-squared of the regression model.\n\n\n\n- r2_within (float): R-squared of the regression model, computed on demeaned dependent variable.\n\n\n\n- adj_r2_within (float): Adjusted R-squared of the regression model, computed on demeaned dependent variable.\n\n\n\n\n\n\n\n\nfeols.Feols.iplot(alpha=0.05, figsize=(500, 300), yintercept=None, xintercept=None, rotate_xticks=0, title=None, coord_flip=True)\nCreate coefficient plots for variables interacted via i() syntax.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nalpha\nfloat\nSignificance level for visualization options. Defaults to None.\n0.05\n\n\nfigsize\ntyping.Tuple[int, int]\nSize of the plot (width, height) in inches. Defaults to None.\n(500, 300)\n\n\nyintercept\nfloat\nValue to set as the y-axis intercept (vertical line). Defaults to None.\nNone\n\n\nxintercept\nfloat\nValue to set as the x-axis intercept (horizontal line). Defaults to None.\nNone\n\n\nrotate_xticks\nint\nRotation angle for x-axis tick labels. Defaults to None.\n0\n\n\ntitle\nstr\nTitle of the plot. Defaults to None.\nNone\n\n\ncoord_flip\nbool\nWhether to flip the coordinates of the plot. Defaults to None.\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nlets-plot figure\nA lets-plot figure with coefficient estimates and confidence intervals.\n\n\n\n\n\n\n\nfeols.Feols.predict(newdata=None)\nReturn a flat np.array with predicted values of the regression model. If new fixed effect levels are introduced in newdata, predicted values for such observations will be set to NaN.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnewdata\ntyping.Optional[pyfixest.dev_utils.DataFrameType]\nA pd.DataFrame or pl.DataFrame with the data to be used for prediction. If None (default), the data used for fitting the model is used.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnumpy.numpy.ndarray\nA flat np.array with predicted values of the regression model.\n\n\n\n\n\n\n\nfeols.Feols.pvalue()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.Series\nA pd.Series with p-values of the estimated regression model.\n\n\n\n\n\n\n\nfeols.Feols.resid()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnumpy.numpy.ndarray\nA np.ndarray with the residuals of the estimated regression model.\n\n\n\n\n\n\n\nfeols.Feols.se()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.Series\nA pd.Series with the standard errors of the estimated regression model.\n\n\n\n\n\n\n\nfeols.Feols.summary(digits=3)\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndigits\nint\nThe number of digits to be displayed. Defaults to 3.\n3\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfeols.Feols.tidy()\nReturn a tidy pd.DataFrame with the point estimates, standard errors, t statistics, and p-values.\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\nA tidy pd.DataFrame containing the regression results, including point estimates, standard errors, t statistics, and p-values.\n\n\n\n\n\n\n\nfeols.Feols.tstat()\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.Series\nA pd.Series with t-statistics of the estimated regression model.\n\n\n\n\n\n\n\nfeols.Feols.vcov(vcov)\nCompute covariance matrices for an estimated regression model.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nvcov\ntyping.Union[str, typing.Dict[str, str]]\nA string or dictionary specifying the type of variance-covariance matrix to use for inference. If a string, it can be one of “iid”, “hetero”, “HC1”, “HC2”, “HC3”. If a dictionary, it should have the format {“CRV1”: “clustervar”} for CRV1 inference or {“CRV3”: “clustervar”} for CRV3 inference. Note that CRV3 inference is currently not supported for IV estimation.\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npyfixest.feols.Feols\nAn instance of class [Feols(/reference/Feols.qmd) with updated inference.\n\n\n\n\n\n\n\nfeols.Feols.wald_test(R=None, q=None, distribution='F')\nCompute a Wald test for a linear hypothesis of the form Rb = q. By default, tests the joint null hypothesis that all coefficients are zero.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nR\narray - like\nThe matrix R of the linear hypothesis. If None, defaults to an identity matrix.\nNone\n\n\nq\narray - like\nThe vector q of the linear hypothesis. If None, defaults to a vector of zeros.\nNone\n\n\ndistribution\nstr\nThe distribution to use for the p-value. Can be either “F” or “chi2”. Defaults to “F”.\n'F'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.Series\nA pd.Series with the Wald statistic and p-value.\n\n\n\n\n\n\n\nfeols.Feols.wildboottest(B, cluster=None, param=None, weights_type='rademacher', impose_null=True, bootstrap_type='11', seed=None, adj=True, cluster_adj=True, parallel=False)\nRun a wild cluster bootstrap based on an object of type “Feols”.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nB\nint\nThe number of bootstrap iterations to run.\nrequired\n\n\ncluster\ntyping.Union[None, numpy.numpy.ndarray, pandas.pandas.Series, pandas.pandas.DataFrame]\nIf None (default), checks if the model’s vcov type was CRV. If yes, uses self._clustervar as cluster. If None and no clustering was employed in the initial model, runs a heteroskedastic wild bootstrap. If an argument is supplied, it is used as the cluster variable for the wild cluster bootstrap. Requires a numpy array of dimension one, a pandas Series, or DataFrame, containing the clustering variable.\nNone\n\n\nparam\ntyping.Union[str, None]\nA string of length one, containing the test parameter of interest. Defaults to None.\nNone\n\n\nweights_type\nstr\nThe type of bootstrap weights. Options are ‘rademacher’, ‘mammen’, ‘webb’, or ‘normal’. Defaults to ‘rademacher’.\n'rademacher'\n\n\nimpose_null\nbool\nIndicates whether to impose the null hypothesis on the bootstrap DGP. Defaults to True.\nTrue\n\n\nbootstrap_type\nstr\nA string of length one to choose the bootstrap type. Options are ‘11’, ‘31’, ‘13’, or ‘33’. Defaults to ‘11’.\n'11'\n\n\nseed\ntyping.Union[int, None]\nAn option to provide a random seed. Defaults to None.\nNone\n\n\nadj\nbool\nIndicates whether to apply a small sample adjustment for the number of observations and covariates. Defaults to True.\nTrue\n\n\ncluster_adj\nbool\nIndicates whether to apply a small sample adjustment for the number of clusters. Defaults to True.\nTrue\n\n\nparallel\nbool\nIndicates whether to run the bootstrap in parallel. Defaults to False.\nFalse\n\n\nseed\ntyping.Union[str, None]\nAn option to provide a random seed. Defaults to None.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\nA DataFrame with the original, non-bootstrapped t-statistic and bootstrapped p-value, along with the bootstrap type, inference type (HC vs CRV), and whether the null hypothesis was imposed on the bootstrap DGP."
  },
  {
    "objectID": "reference/fepois.Fepois.html",
    "href": "reference/fepois.Fepois.html",
    "title": "",
    "section": "",
    "text": "fepois.Fepois(self, Y, X, fe, weights, coefnames, drop_singletons, collin_tol, maxiter=25, tol=1e-08, weights_name=None)\nNon user-facing class to estimate a Poisson regression model via Iterated Weighted Least Squares (IWLS).\nInherits from the Feols class. Users should not directly instantiate this class, but rather use the fepois() function. Note that no demeaning is performed in this class: demeaning is performed in the FixestMulti class (to allow for caching of demeaned variables for multiple estimation).\nThe method implements the algorithm from Stata’s pplmhdfe module.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nY\nnumpy.numpy.ndarray\nDependent variable, a two-dimensional numpy array.\nrequired\n\n\nX\nnumpy.numpy.ndarray\nIndependent variables, a two-dimensional numpy array.\nrequired\n\n\nfe\nnumpy.numpy.ndarray\nFixed effects, a two-dimensional numpy array or None.\nrequired\n\n\nweights\nnumpy.numpy.ndarray\nWeights, a one-dimensional numpy array or None.\nrequired\n\n\ncoefnames\ntyping.List[str]\nNames of the coefficients in the design matrix X.\nrequired\n\n\ndrop_singletons\nbool\nWhether to drop singleton fixed effects.\nrequired\n\n\ncollin_tol\nfloat\nTolerance level for the detection of collinearity.\nrequired\n\n\nmaxiter\ntyping.Optional[int]\nMaximum number of iterations for the IRLS algorithm.\n25\n\n\ntol\ntyping.Optional[float]\nTolerance level for the convergence of the IRLS algorithm.\n1e-08\n\n\nweights_name\ntyping.Optional[str]\nName of the weights variable.\nNone\n\n\n\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nget_fit\nFit a Poisson Regression Model via Iterated Weighted Least Squares (IWLS).\n\n\npredict\nReturn a flat np.array with predicted values of the regression model.\n\n\n\n\n\nfepois.Fepois.get_fit()\nFit a Poisson Regression Model via Iterated Weighted Least Squares (IWLS).\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nbeta_hat\nnumpy.numpy.ndarray\nEstimated coefficients.\n\n\nY_hat\nnumpy.numpy.ndarray\nEstimated dependent variable.\n\n\nu_hat\nnumpy.numpy.ndarray\nEstimated residuals.\n\n\nweights\nnumpy.numpy.ndarray\nWeights (from the last iteration of the IRLS algorithm).\n\n\nX\nnumpy.numpy.ndarray\nDemeaned independent variables (from the last iteration of the IRLS algorithm).\n\n\nZ\nnumpy.numpy.ndarray\nDemeaned independent variables (from the last iteration of the IRLS algorithm).\n\n\nY\nnumpy.numpy.ndarray\nDemeaned dependent variable (from the last iteration of the IRLS algorithm).\n\n\n\n\n\n\n\nfepois.Fepois.predict(newdata=None, type='link')\nReturn a flat np.array with predicted values of the regression model. If new fixed effect levels are introduced in newdata, predicted values for such observations will be set to NaN.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nnewdata\ntyping.Union[None, pandas.pandas.DataFrame]\nA pd.DataFrame with the new data, to be used for prediction. If None (default), uses the data used for fitting the model.\nNone\n\n\ntype\nstr\nThe type of prediction to be computed. Can be either “response” (default) or “link”. If type=“response”, the output is at the level of the response variable, i.e., it is the expected predictor E(Y|X). If “link”, the output is at the level of the explanatory variables, i.e., the linear predictor X @ beta.\n'link'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nnumpy.numpy.ndarray\nA flat array with the predicted values of the regression model."
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "",
    "section": "",
    "text": "User facing estimation functions\n\n\n\nestimation.feols\nEstimate a linear regression models with fixed effects using fixest formula syntax.\n\n\nestimation.fepois\nEstimate Poisson regression models with fixed effects using the pplmhdfe algorithm.\n\n\ndid.estimation.did2s\nEstimate a Difference-in-Differences model using Gardner’s two-step DID2S estimator.\n\n\ndid.estimation.lpdid\nEstimate a Difference-in-Differences / Event Study Model via the Local Projections Approach.\n\n\ndid.estimation.event_study\nFunction for Event Study Estimation.\n\n\n\n\n\n\nDetails on Methods and Attributes\n\n\n\nfeols.Feols\nNon user-facing class to estimate an IV model using a 2SLS estimator.\n\n\nfepois.Fepois\nNon user-facing class to estimate a Poisson regression model via Iterated Weighted Least Squares (IWLS).\n\n\nfeiv.Feiv\nNon user-facing class to estimate an IV model using a 2SLS estimator.\n\n\n\n\n\n\nPost-Processing of Estimation Results\n\n\n\nsummarize.summary\nPrints a summary of estimation results for each estimated model.\n\n\nsummarize.etable\nCreate an esttab-like table from a list of models.\n\n\nvisualize.coefplot\nPlot model coefficients with confidence intervals.\n\n\nvisualize.iplot\nPlot model coefficients for variables interacted via “i()” syntax, with confidence intervals.\n\n\n\n\n\n\nPyFixest internals and utilities\n\n\n\ndemean.demean\nWorkhorse for demeaning an input array x based on the specified fixed effects and weights\n\n\ndetect_singletons.detect_singletons\nDetect singleton fixed effects in a dataset.\n\n\nmodel_matrix_fixest.model_matrix_fixest\nCreate model matrices for fixed effects estimation."
  },
  {
    "objectID": "reference/model_matrix_fixest.model_matrix_fixest.html",
    "href": "reference/model_matrix_fixest.model_matrix_fixest.html",
    "title": "",
    "section": "",
    "text": "model_matrix_fixest.model_matrix_fixest(fml, data, drop_singletons=False, weights=None, drop_intercept=False, i_ref1=None, i_ref2=None)\nCreate model matrices for fixed effects estimation.\nThis function preprocesses the data and then calls formulaic.model_matrix() to create the model matrices.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfml\nstr\nA two-sided formula string using fixest formula syntax.\nrequired\n\n\ndata\npandas.pandas.DataFrame\nThe input DataFrame containing the data.\nrequired\n\n\ndrop_singletons\nbool\nWhether to drop singleton fixed effects. Default is False.\nFalse\n\n\nweights\nstr or None\nA string specifying the name of the weights column in data. Default is None.\nNone\n\n\ndata\npandas.pandas.DataFrame\nThe input DataFrame containing the data.\nrequired\n\n\ndrop_intercept\nbool\nWhether to drop the intercept from the model matrix. Default is False. If True, the intercept is dropped ex post from the model matrix created by formulaic.\nFalse\n\n\ni_ref1\nstr or list\nThe reference level for the first variable in the i() syntax.\nNone\n\n\ni_ref2\nstr or list\nThe reference level for the second variable in the i() syntax.\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ntuple\nA tuple of the following elements: - Y : pd.DataFrame A DataFrame of the dependent variable. - X : pd.DataFrame A DataFrame of the covariates. If combine = True, contains covariates and fixed effects as dummies. - I : Optional[pd.DataFrame] A DataFrame of the Instruments, None if no IV. - fe : Optional[pd.DataFrame] A DataFrame of the fixed effects, None if no fixed effects specified. Only applicable if combine = False. - na_index : np.array An array with indices of dropped columns. - fe_na : np.array An array with indices of dropped columns due to fixed effect singletons or NaNs in the fixed effects. - na_index_str : str na_index, but as a comma-separated string. Used for caching of demeaned variables. - z_names : Optional[List[str]] Names of all covariates, minus the endogenous variables, plus the instruments. None if no IV. - weights : Optional[str] Weights as a string if provided, or None if no weights, e.g., “weights”. - has_weights : bool A boolean indicating whether weights are used. - icovars : Optional[List[str]] A list of interaction variables provided via i(). None if no interaction variables via i() provided.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\nlist or None\n\nicovars - A list of interaction variables. None if no interaction variables via i() provided."
  },
  {
    "objectID": "reference/summarize.etable.html",
    "href": "reference/summarize.etable.html",
    "title": "",
    "section": "",
    "text": "summarize.etable(models, digits=3, type='md')\nCreate an esttab-like table from a list of models.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmodels\nlist\nA list of models of type Feols, Feiv, Fepois.\nrequired\n\n\ndigits\nint\nNumber of digits to round to.\n3\n\n\ntype\nstr\nType of output. Either “df” for pandas DataFrame, “md” for markdown, or “tex” for LaTeX table. Default is “md”.\n'md'\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\nA DataFrame with the coefficients and standard errors of the models.\n\n\n\n\n\n\n\nfrom pyfixest.estimation import feols\nfrom pyfixest.utils import get_data\nfrom pyfixest.summarize import etable\n\n# load data\ndf = get_data()\nfit1 = feols(\"Y~X1 + X2 | f1\", df)\nfit2 = feols(\"Y~X1 + X2 | f1 + f2\", df)\nfit3 = feols(\"Y~X1 + X2 | f1 + f2 + f3\", df)\n\netable([fit1, fit2, fit3])\n\n\n            \n            \n            \n\n\n                           est1               est2               est3\n------------  -----------------  -----------------  -----------------\ndepvar                        Y                  Y                  Y\n---------------------------------------------------------------------\nX1             -0.95*** (0.067)  -0.924*** (0.061)  -0.957*** (0.039)\nX2            -0.174*** (0.018)  -0.174*** (0.015)  -0.194*** (0.009)\n---------------------------------------------------------------------\nf3                            -                  -                  x\nf1                            x                  x                  x\nf2                            -                  x                  x\n---------------------------------------------------------------------\nR2                        0.489              0.659              0.823\nS.E. type                by: f1             by: f1             by: f1\nObservations                997                997                997\n---------------------------------------------------------------------\nSignificance levels: * p < 0.05, ** p < 0.01, *** p < 0.001"
  },
  {
    "objectID": "reference/summarize.summary.html",
    "href": "reference/summarize.summary.html",
    "title": "",
    "section": "",
    "text": "summarize.summary(models, digits=3)\nPrints a summary of estimation results for each estimated model.\nFor each model, this method prints a header indicating the fixed-effects and the dependent variable, followed by a table of coefficient estimates with standard errors, t-values, and p-values.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndigits\nint\nThe number of decimal places to round the summary statistics to. Default is 3.\n3\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nNone\n\n\n\n\n\n\n\n\nfrom pyfixest.utils import get_data\nfrom pyfixest.estimation import feols\nfrom pyfixest.summarize import summary\n\n# load data\ndf = get_data()\nfit1 = feols(\"Y~X1 + X2 | f1\", df)\nfit2 = feols(\"Y~X1 + X2 | f1 + f2\", df)\nfit3 = feols(\"Y~X1 + X2 | f1 + f2 + f3\", df)\n\nsummary([fit1, fit2, fit3])\n\n\n            \n            \n            \n\n\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.950 |        0.067 |   -14.273 |      0.000 |  -1.086 |   -0.813 |\n| X2            |     -0.174 |        0.018 |    -9.469 |      0.000 |  -0.212 |   -0.137 |\n---\nRMSE: 1.648   R2: 0.489   R2 Within: 0.239\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.924 |        0.061 |   -15.165 |      0.000 |  -1.049 |   -0.799 |\n| X2            |     -0.174 |        0.015 |   -11.918 |      0.000 |  -0.204 |   -0.144 |\n---\nRMSE: 1.346   R2: 0.659   R2 Within: 0.303\n###\n\nEstimation:  OLS\nDep. var.: Y, Fixed effects: f1+f2+f3\nInference:  CRV1\nObservations:  997\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| X1            |     -0.957 |        0.039 |   -24.645 |      0.000 |  -1.037 |   -0.878 |\n| X2            |     -0.194 |        0.009 |   -21.730 |      0.000 |  -0.212 |   -0.176 |\n---\nRMSE: 0.97   R2: 0.823   R2 Within: 0.481"
  },
  {
    "objectID": "reference/visualize.coefplot.html",
    "href": "reference/visualize.coefplot.html",
    "title": "",
    "section": "",
    "text": "visualize.coefplot(models, alpha=0.05, figsize=(500, 300), yintercept=0, xintercept=None, rotate_xticks=0, coefficients=None, title=None, coord_flip=True)\nPlot model coefficients with confidence intervals.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmodels\nlist or object\nA list of fitted models of type [Feols(/reference/Feols.qmd) or Fepois, or just a single model.\nrequired\n\n\nfigsize\ntuple\nThe size of the figure.\n(500, 300)\n\n\nalpha\nfloat\nThe significance level for the confidence intervals.\n0.05\n\n\nyintercept\nfloat or None\nThe value at which to draw a horizontal line on the plot. Default is 0.\n0\n\n\nxintercept\nfloat or None\nThe value at which to draw a vertical line on the plot. Default is None.\nNone\n\n\nrotate_xticks\nfloat\nThe angle in degrees to rotate the xticks labels. Default is 0 (no rotation).\n0\n\n\ncoefficients\nlist\nA list of coefficients to plot. If None, all coefficients are plotted.\nNone\n\n\ntitle\nstr\nThe title of the plot.\nNone\n\n\ncoord_flip\nbool\nWhether to flip the coordinates of the plot. Default is True.\nTrue\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nA lets-plot figure.\n\n\n\n\n\n\n\nfrom pyfixest.utils import get_data\nfrom pyfixest.estimation import feols\nfrom pyfixest.visualize import coefplot\n\ndf = get_data()\nfit1 = feols(\"Y ~ X1\", data = df)\nfit2 = feols(\"Y ~ X1 + X2\", data = df)\nfit3 = feols(\"Y ~ X1 + X2 | f1\", data = df)\n\ncoefplot([fit1, fit2, fit3])"
  },
  {
    "objectID": "reference/visualize.iplot.html",
    "href": "reference/visualize.iplot.html",
    "title": "",
    "section": "",
    "text": "visualize.iplot(models, alpha=0.05, figsize=(500, 300), yintercept=None, xintercept=None, rotate_xticks=0, title=None, coord_flip=True)\nPlot model coefficients for variables interacted via “i()” syntax, with confidence intervals.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nmodels\nlist or object\nA list of fitted models of type [Feols(/reference/Feols.qmd) or Fepois, or just a single model.\nrequired\n\n\nfigsize\ntuple\nThe size of the figure.\n(500, 300)\n\n\nalpha\nfloat\nThe significance level for the confidence intervals.\n0.05\n\n\nyintercept\nint or None\nThe value at which to draw a horizontal line on the plot.\nNone\n\n\nxintercept\nint or None\nThe value at which to draw a vertical line on the plot.\nNone\n\n\nrotate_xticks\nfloat\nThe angle in degrees to rotate the xticks labels. Default is 0 (no rotation).\n0\n\n\ntitle\nstr\nThe title of the plot.\nNone\n\n\ncoord_flip\nbool\nWhether to flip the coordinates of the plot. Default is True.\nTrue\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nobject\nA lets-plot figure.\n\n\n\n\n\n\n\nfrom pyfixest.utils import get_data\nfrom pyfixest.estimation import feols\nfrom pyfixest.visualize import iplot\n\ndf = get_data()\nfit1 = feols(\"Y ~ i(f1)\", data = df)\nfit2 = feols(\"Y ~ i(f1) + X2\", data = df)\nfit3 = feols(\"Y ~ i(f1) + X2 | f2\", data = df)\n\niplot([fit1, fit2, fit3])"
  },
  {
    "objectID": "replicating-the-effect.html",
    "href": "replicating-the-effect.html",
    "title": "",
    "section": "",
    "text": "This notebook replicates code examples from Nick Huntington-Klein’s book on causal inference, The Effect.\n\n%load_ext autoreload\n%autoreload 2\n\nimport pandas as pd\nimport numpy as np\nfrom pyfixest.estimation import feols\nfrom pyfixest.summarize import summary\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n\n\n\n\n\nfrom causaldata import Mroz\n\n# Read in data\ndt = Mroz.load_pandas().data\n# Keep just working women\ndt = dt[dt[\"lfp\"] == True]\n# Create unlogged earnings\ndt.loc[:, \"earn\"] = dt[\"lwg\"].apply(\"exp\")\n\n# 5. Run multiple linear regression models by succesively adding controls\nfit = feols(fml=\"lwg ~ csw(inc, wc, k5)\", data=dt, vcov=\"iid\")\nfit.summary()\n\n###\n\nEstimation:  OLS\nDep. var.: lwg\nInference:  iid\nObservations:  428\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      1.007 |        0.071 |    14.180 |      0.000 |   0.868 |    1.147 |\n| inc           |      0.010 |        0.003 |     2.947 |      0.003 |   0.003 |    0.016 |\n---\nRMSE: 0.715   R2: 0.02\n###\n\nEstimation:  OLS\nDep. var.: lwg\nInference:  iid\nObservations:  428\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.972 |        0.070 |    13.909 |      0.000 |   0.834 |    1.109 |\n| inc           |      0.005 |        0.003 |     1.640 |      0.102 |  -0.001 |    0.012 |\n| wc            |      0.342 |        0.075 |     4.595 |      0.000 |   0.196 |    0.489 |\n---\nRMSE: 0.698   R2: 0.066\n###\n\nEstimation:  OLS\nDep. var.: lwg\nInference:  iid\nObservations:  428\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |      0.982 |        0.071 |    13.819 |      0.000 |   0.843 |    1.122 |\n| inc           |      0.005 |        0.003 |     1.590 |      0.113 |  -0.001 |    0.012 |\n| wc            |      0.349 |        0.075 |     4.656 |      0.000 |   0.202 |    0.497 |\n| k5            |     -0.072 |        0.087 |    -0.825 |      0.410 |  -0.243 |    0.099 |\n---\nRMSE: 0.697   R2: 0.068\n\n\nC:\\Users\\alexa\\AppData\\Local\\Temp\\ipykernel_13896\\3519125210.py:8: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  dt.loc[:, \"earn\"] = dt[\"lwg\"].apply(\"exp\")\n\n\n\n\n\n\n\n\nfrom causaldata import restaurant_inspections\n\nres = restaurant_inspections.load_pandas().data\nres.inspection_score = res.inspection_score.astype(float)\nres.NumberofLocations = res.NumberofLocations.astype(float)\nres.dtypes\n\nfit = feols(fml=\"inspection_score ~ NumberofLocations\", data=res)\nsummary(fit)\n\n###\n\nEstimation:  OLS\nDep. var.: inspection_score\nInference:  iid\nObservations:  27178\n\n| Coefficient       |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:------------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept         |     94.866 |        0.046 |  2049.047 |      0.000 |  94.775 |   94.956 |\n| NumberofLocations |     -0.019 |        0.000 |   -43.321 |      0.000 |  -0.020 |   -0.018 |\n---\nRMSE: 6.051   R2: 0.065\n\n\n\n\n\n\ndf = restaurant_inspections.load_pandas().data\n\nfit1 = feols(\n    fml=\"inspection_score ~ NumberofLocations + I(NumberofLocations^2) + Year\", data=df\n)\nfit2 = feols(fml=\"inspection_score ~ NumberofLocations*Weekend + Year\", data=df)\n\nsummary([fit1, fit2])\n\n###\n\nEstimation:  OLS\nDep. var.: inspection_score\nInference:  iid\nObservations:  27178\n\n| Coefficient            |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:-----------------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept              |    225.504 |       12.409 |    18.172 |      0.000 | 201.181 |  249.827 |\n| NumberofLocations      |     -0.075 |        0.019 |    -4.041 |      0.000 |  -0.111 |   -0.039 |\n| I(NumberofLocations^2) |      0.056 |        0.019 |     3.009 |      0.003 |   0.020 |    0.093 |\n| Year                   |     -0.065 |        0.006 |   -10.527 |      0.000 |  -0.077 |   -0.053 |\n---\nRMSE: 6.038   R2: 0.069\n###\n\nEstimation:  OLS\nDep. var.: inspection_score\nInference:  iid\nObservations:  27178\n\n| Coefficient               |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept                 |    225.126 |       12.415 |    18.134 |      0.000 | 200.793 |  249.460 |\n| NumberofLocations         |     -0.019 |        0.000 |   -43.759 |      0.000 |  -0.020 |   -0.018 |\n| Weekend                   |      1.759 |        0.488 |     3.606 |      0.000 |   0.803 |    2.715 |\n| Year                      |     -0.065 |        0.006 |   -10.494 |      0.000 |  -0.077 |   -0.053 |\n| NumberofLocations:Weekend |     -0.010 |        0.008 |    -1.307 |      0.191 |  -0.025 |    0.005 |\n---\nRMSE: 6.038   R2: 0.069\n\n\n\n\n\n\nfeols(fml=\"inspection_score ~ Year + Weekend\", data=df, vcov=\"HC3\").summary()\n\n###\n\nEstimation:  OLS\nDep. var.: inspection_score\nInference:  HC3\nObservations:  27178\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Intercept     |    185.380 |       12.150 |    15.257 |      0.000 | 161.564 |  209.196 |\n| Year          |     -0.046 |        0.006 |    -7.551 |      0.000 |  -0.057 |   -0.034 |\n| Weekend       |      2.057 |        0.353 |     5.829 |      0.000 |   1.365 |    2.749 |\n---\nRMSE: 6.248   R2: 0.003\n\n\n\n\n\n\nfeols(fml=\"inspection_score ~ Year + Weekend\", data=df, vcov={\"CRV1\": \"Weekend\"}).tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Intercept\n      185.380033\n      3.264345\n      56.789343\n      0.011209\n      143.902592\n      226.857474\n    \n    \n      Year\n      -0.045640\n      0.001624\n      -28.107556\n      0.022640\n      -0.066272\n      -0.025008\n    \n    \n      Weekend\n      2.057166\n      0.001401\n      1468.256800\n      0.000434\n      2.039364\n      2.074969\n    \n  \n\n\n\n\n\n\n\n\nfit = feols(fml=\"inspection_score ~ Year + Weekend\", data=df)\nfit.wildboottest(B=999, param=\"Year\")\n\n\n\n\n\n\n\ntba\n\n\n\n\nfrom causaldata import gapminder\n\ngm = gapminder.load_pandas().data\ngm[\"logGDPpercap\"] = gm[\"gdpPercap\"].apply(\"log\")\n\nfit = feols(fml=\"lifeExp ~ C(country) + np.log(gdpPercap)\", data=gm)\nfit.tidy().head()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      Intercept\n      -27.773459\n      2.500533\n      -11.107015\n      0.000000e+00\n      -32.678217\n      -22.868701\n    \n    \n      C(country)[T.Albania]\n      17.782625\n      2.195160\n      8.100835\n      1.110223e-15\n      13.476853\n      22.088397\n    \n    \n      C(country)[T.Algeria]\n      5.241055\n      2.214496\n      2.366704\n      1.806875e-02\n      0.897356\n      9.584755\n    \n    \n      C(country)[T.Angola]\n      -13.907122\n      2.201727\n      -6.316460\n      3.481857e-10\n      -18.225777\n      -9.588468\n    \n    \n      C(country)[T.Argentina]\n      8.132158\n      2.272781\n      3.578065\n      3.567229e-04\n      3.674133\n      12.590183\n    \n  \n\n\n\n\n\n\n\n\n# Set our individual and time (index) for our data\nfit = feols(fml=\"lifeExp ~ np.log(gdpPercap) | country + year\", data=gm)\nfit.summary()\n\n###\n\nEstimation:  OLS\nDep. var.: lifeExp, Fixed effects: country+year\nInference:  CRV1\nObservations:  1704\n\n| Coefficient       |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:------------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| np.log(gdpPercap) |      1.450 |        0.677 |     2.141 |      0.034 |   0.111 |    2.788 |\n---\nRMSE: 3.267  Adj. R2: 0.018  Adj. R2 Within: 0.018\n\n\n\n\n\n\n\n\n\nfrom causaldata import organ_donations\n\nod = organ_donations.load_pandas().data\n\n# Create Treatment Variable\nod[\"California\"] = od[\"State\"] == \"California\"\nod[\"After\"] = od[\"Quarter_Num\"] > 3\nod[\"Treated\"] = 1 * (od[\"California\"] & od[\"After\"])\n\ndid = feols(fml=\"Rate ~ Treated | State + Quarter\", data=od)\ndid.summary()\n\n###\n\nEstimation:  OLS\nDep. var.: Rate, Fixed effects: State+Quarter\nInference:  CRV1\nObservations:  162\n\n| Coefficient   |   Estimate |   Std. Error |   t value |   Pr(>|t|) |   2.5 % |   97.5 % |\n|:--------------|-----------:|-------------:|----------:|-----------:|--------:|---------:|\n| Treated       |     -0.022 |        0.006 |    -3.733 |      0.001 |  -0.035 |   -0.010 |\n---\nRMSE: 0.022  Adj. R2: 0.003  Adj. R2 Within: 0.003\n\n\n\n\n\n\nfrom causaldata import organ_donations\nfrom pyfixest.visualize import iplot\n\nod = organ_donations.load_pandas().data\n\n# Create Treatment Variable\nod[\"California\"] = od[\"State\"] == \"California\"\n# od[\"Quarter_Num\"] = pd.Categorical(od.Quarter_Num)\nod[\"California\"] = od.California.astype(float)\n\ndid2 = feols(\n    fml=\"Rate ~ i(Quarter_Num, California) | State + Quarter_Num\", data=od, i_ref1=3\n)\n\ndid2.tidy()\n\n\n\n\n\n  \n    \n      \n      Estimate\n      Std. Error\n      t value\n      Pr(>|t|)\n      2.5 %\n      97.5 %\n    \n    \n      Coefficient\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      C(Quarter_Num,contr.treatment(base=3))[T.1]:California\n      -0.002942\n      0.004986\n      -0.590105\n      0.560215\n      -0.013191\n      0.007307\n    \n    \n      C(Quarter_Num,contr.treatment(base=3))[T.2]:California\n      0.006296\n      0.002222\n      2.833502\n      0.008782\n      0.001729\n      0.010864\n    \n    \n      C(Quarter_Num,contr.treatment(base=3))[T.4]:California\n      -0.021565\n      0.004937\n      -4.368464\n      0.000178\n      -0.031713\n      -0.011418\n    \n    \n      C(Quarter_Num,contr.treatment(base=3))[T.5]:California\n      -0.020292\n      0.004387\n      -4.625529\n      0.000090\n      -0.029310\n      -0.011275\n    \n    \n      C(Quarter_Num,contr.treatment(base=3))[T.6]:California\n      -0.022165\n      0.009820\n      -2.257160\n      0.032627\n      -0.042351\n      -0.001980"
  }
]