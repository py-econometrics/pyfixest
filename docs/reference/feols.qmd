# feols { #pyfixest.feols }

`feols`



## Classes

| Name | Description |
| --- | --- |
| [Feols](#pyfixest.feols.Feols) | # Feols |

### Feols { #pyfixest.feols.Feols }

`feols.Feols(self, Y, X, weights, collin_tol, coefnames)`

# Feols

A class for estimating regression models with high-dimensional fixed effects via
ordinary least squares.

#### Methods

| Name | Description |
| --- | --- |
| [add_fixest_multi_context](#pyfixest.feols.Feols.add_fixest_multi_context) | Enrich an instance of class `Feols` with additional attributes set in the `FixestMulti` class. |
| [coef](#pyfixest.feols.Feols.coef) | Return a pd.Series with estimated regression coefficients. |
| [coefplot](#pyfixest.feols.Feols.coefplot) | Create a coefficient plot to visualize model coefficients. |
| [confint](#pyfixest.feols.Feols.confint) | Return a pd.DataFrame with confidence intervals for the estimated regression model. |
| [fixef](#pyfixest.feols.Feols.fixef) | Compute the coefficients of (sweeped out) fixed effects for a regression model. |
| [get_fit](#pyfixest.feols.Feols.get_fit) | Fit a single regression model, via ordinary least squares (OLS). |
| [get_inference](#pyfixest.feols.Feols.get_inference) | Compute standard errors, t-statistics and p-values for the regression model. |
| [get_nobs](#pyfixest.feols.Feols.get_nobs) | Fetch the number of observations used in fitting the regression model. |
| [get_performance](#pyfixest.feols.Feols.get_performance) | Compute multiple additional measures commonly reported with linear regression output, |
| [iplot](#pyfixest.feols.Feols.iplot) | Create a coefficient plots for variables interaceted via `i()` syntax. |
| [predict](#pyfixest.feols.Feols.predict) | Return a flat np.array with predicted values of the regression model. |
| [pvalue](#pyfixest.feols.Feols.pvalue) | Return a pd.Series with p-values of the estimated regression model. |
| [resid](#pyfixest.feols.Feols.resid) | Returns a one dimensional np.array with the residuals of the estimated regression model. |
| [se](#pyfixest.feols.Feols.se) | Return a pd.Series with standard errors of the estimated regression model. |
| [summary](#pyfixest.feols.Feols.summary) | Print a summary of the estimated regression model. |
| [tidy](#pyfixest.feols.Feols.tidy) | Return a tidy pd.DataFrame with the point estimates, standard errors, t statistics and p-values. |
| [tstat](#pyfixest.feols.Feols.tstat) | Return a pd.Series with t-statistics of the estimated regression model. |
| [vcov](#pyfixest.feols.Feols.vcov) | Compute covariance matrices for an estimated regression model. |
| [wald_test](#pyfixest.feols.Feols.wald_test) | Compute a Wald test for a linear hypothesis of the form Rb = q. By default, tests the joint null hypothesis that all coefficients are zero. |
| [wildboottest](#pyfixest.feols.Feols.wildboottest) | Run a wild cluster bootstrap based on an object of type "Feols" |

##### add_fixest_multi_context { #pyfixest.feols.Feols.add_fixest_multi_context }

`feols.Feols.add_fixest_multi_context(fml, depvar, Y, _data, _ssc_dict, _k_fe, fval, na_index)`

Enrich an instance of class `Feols` with additional attributes set in the `FixestMulti` class.
Args:
    fml (str): The formula used for estimation.
    depvar (str): The dependent variable of the regression model.
    Y (pd.Series): The dependent variable of the regression model.
    _data (pd.DataFrame): The data used for estimation.
    _ssc_dict (dict): A dictionary with the sum of squares and cross products matrices.
    _k_fe (int): The number of fixed effects.
    fval (str): The fixed effects formula.
    na_index (np.ndarray): An array with the indices of missing values.
Returns:
    None

##### coef { #pyfixest.feols.Feols.coef }

`feols.Feols.coef()`

Return a pd.Series with estimated regression coefficients.

##### coefplot { #pyfixest.feols.Feols.coefplot }

`feols.Feols.coefplot(alpha=0.05, figsize=(500, 300), yintercept=0, xintercept=None, rotate_xticks=0, coefficients=None, title=None, coord_flip=True)`

Create a coefficient plot to visualize model coefficients.

Args:
    alpha (float, optional): Significance level for highlighting significant coefficients.
    figsize (Tuple[int, int], optional): Size of the plot (width, height) in inches.
    yintercept (float, optional): Value to set as the y-axis intercept (vertical line).
    xintercept (float, optional): Value to set as the x-axis intercept (horizontal line).
    rotate_xticks (int, optional): Rotation angle for x-axis tick labels.
    coefficients (List[str], optional): List of coefficients to include in the plot.
        If None, all coefficients are included.
    title (str, optional): Title of the plot.
    coord_flip (bool, optional): Whether to flip the coordinates of the plot.

Returns:
    A lets-plot figure with coefficient estimates and confidence intervals.

##### confint { #pyfixest.feols.Feols.confint }

`feols.Feols.confint()`

Return a pd.DataFrame with confidence intervals for the estimated regression model.

##### fixef { #pyfixest.feols.Feols.fixef }

`feols.Feols.fixef()`

Compute the coefficients of (sweeped out) fixed effects for a regression model.

This method creates the following attributes:

- `alphaDF` (pd.DataFrame): A DataFrame with the estimated fixed effects.
- `sumFE` (np.array): An array with the sum of fixed effects for each observation (i = 1, ..., N).

Args:
    None

Returns:
    None

##### get_fit { #pyfixest.feols.Feols.get_fit }

`feols.Feols.get_fit()`

Fit a single regression model, via ordinary least squares (OLS).

Args:
    None
Returns:
    None

##### get_inference { #pyfixest.feols.Feols.get_inference }

`feols.Feols.get_inference(alpha=0.95)`

Compute standard errors, t-statistics and p-values for the regression model.

Args:
    alpha (float): The significance level for confidence intervals. Defaults to 0.95.

Returns:
    None

##### get_nobs { #pyfixest.feols.Feols.get_nobs }

`feols.Feols.get_nobs()`

Fetch the number of observations used in fitting the regression model.

Params:
    None
Returns:
    None

##### get_performance { #pyfixest.feols.Feols.get_performance }

`feols.Feols.get_performance()`

Compute multiple additional measures commonly reported with linear regression output,
including R-squared and adjusted R-squared. Not that variables with suffix _within
use demeand dependent variables Y, while variables without do not or are invariat to
demeaning.

Returns:
    None

Creates the following instances:
    r2 (float): R-squared of the regression model.
    adj_r2 (float): Adjusted R-squared of the regression model.
    r2_within (float): R-squared of the regression model, computed on demeaned dependent variable.
    adj_r2_within (float): Adjusted R-squared of the regression model, computed on demeaned dependent variable.

##### iplot { #pyfixest.feols.Feols.iplot }

`feols.Feols.iplot(alpha=0.05, figsize=(500, 300), yintercept=None, xintercept=None, rotate_xticks=0, title=None, coord_flip=True)`

Create a coefficient plots for variables interaceted via `i()` syntax.

Args:
    alpha (float, optional): Significance level for visualization options.
    figsize (Tuple[int, int], optional): Size of the plot (width, height) in inches.
    yintercept (float, optional): Value to set as the y-axis intercept (vertical line).
    xintercept (float, optional): Value to set as the x-axis intercept (horizontal line).
    rotate_xticks (int, optional): Rotation angle for x-axis tick labels.
    title (str, optional): Title of the plot.
    coord_flip (bool, optional): Whether to flip the coordinates of the plot.

Returns:
    A lets-plot figure with coefficient estimates and confidence intervals.

##### predict { #pyfixest.feols.Feols.predict }

`feols.Feols.predict(newdata=None)`

Return a flat np.array with predicted values of the regression model.
If new fixed effect levels are introduced in `newdata`, predicted values for such observations
will be set to NaN.

Args:
    newdata (Optional[DataFrameType], optional): A pd.DataFrame or pl.DataFrame with the data to be used for prediction.
        If None (default), uses the data used for fitting the model.

Returns:
    y_hat (np.ndarray): A flat np.array with predicted values of the regression model.

##### pvalue { #pyfixest.feols.Feols.pvalue }

`feols.Feols.pvalue()`

Return a pd.Series with p-values of the estimated regression model.

##### resid { #pyfixest.feols.Feols.resid }

`feols.Feols.resid()`

Returns a one dimensional np.array with the residuals of the estimated regression model.

##### se { #pyfixest.feols.Feols.se }

`feols.Feols.se()`

Return a pd.Series with standard errors of the estimated regression model.

##### summary { #pyfixest.feols.Feols.summary }

`feols.Feols.summary(digits=3)`

Print a summary of the estimated regression model.
Args:
    digits (int, optional): Number of digits to be printed. Defaults to 3.
Returns:
    None

##### tidy { #pyfixest.feols.Feols.tidy }

`feols.Feols.tidy()`

Return a tidy pd.DataFrame with the point estimates, standard errors, t statistics and p-values.
Returns:
    tidy_df (pd.DataFrame): A tidy pd.DataFrame with the regression results.

##### tstat { #pyfixest.feols.Feols.tstat }

`feols.Feols.tstat()`

Return a pd.Series with t-statistics of the estimated regression model.

##### vcov { #pyfixest.feols.Feols.vcov }

`feols.Feols.vcov(vcov)`

Compute covariance matrices for an estimated regression model.

Args:
    vcov : Union[str, Dict[str, str]
        A string or dictionary specifying the type of variance-covariance matrix to use for inference.
        If a string, can be one of "iid", "hetero", "HC1", "HC2", "HC3".
        If a dictionary, it should have the format {"CRV1":"clustervar"} for CRV1 inference
        or {"CRV3":"clustervar"} for CRV3 inference.
        Note that CRV3 inference is currently not supported with arbitrary fixed effects and IV estimation.

Returns:
    An instance of class `Feols` with updated inference.

##### wald_test { #pyfixest.feols.Feols.wald_test }

`feols.Feols.wald_test(R=None, q=None, distribution='F')`

Compute a Wald test for a linear hypothesis of the form Rb = q. By default, tests the joint null hypothesis that all coefficients are zero.
Args:
    R: The matrix R of the linear hypothesis. If None, defaults to an identity matrix.
    q: The vector q of the linear hypothesis. If None, defaults to a vector of zeros.
    distribution: The distribution to use for the p-value. Either "F" or "chi2". Defaults to "F".
Returns:
    A pd.Series with the Wald statistic and p-value.

##### wildboottest { #pyfixest.feols.Feols.wildboottest }

`feols.Feols.wildboottest(B, cluster=None, param=None, weights_type='rademacher', impose_null=True, bootstrap_type='11', seed=None, adj=True, cluster_adj=True, parallel=False)`

Run a wild cluster bootstrap based on an object of type "Feols"

Args:

B (int): The number of bootstrap iterations to run
cluster (Union[None, np.ndarray, pd.Series, pd.DataFrame], optional): If None (default), checks if the model's vcov type was CRV. If yes, uses
                    `self._clustervar` as cluster. If None and no clustering was employed in the initial model, runs a heteroskedastic wild bootstrap.
                    If an argument is supplied, uses the argument as cluster variable for the wild cluster bootstrap.
                    Requires a numpy array of dimension one,a  pandas Series or DataFrame, containing the clustering variable.
param (Union[str, None], optional): A string of length one, containing the test parameter of interest. Defaults to None.
weights_type (str, optional): The type of bootstrap weights. Either 'rademacher', 'mammen', 'webb' or 'normal'.
                    'rademacher' by default. Defaults to 'rademacher'.
impose_null (bool, optional): Should the null hypothesis be imposed on the bootstrap dgp, or not? Defaults to True.
bootstrap_type (str, optional):A string of length one. Allows to choose the bootstrap type
                    to be run. Either '11', '31', '13' or '33'. '11' by default. Defaults to '11'.
seed (Union[int, None], optional): Option to provide a random seed. Defaults to None.
adj (bool, optional): Should a small sample adjustment be applied for number of observations and covariates? Defaults to True.
                      Note that the small sample adjustment in the bootstrap might differ from the one in the original model.
                      This will only affect the returned non-bootstrapped t-statistic, but not the bootstrapped p-value.
                      For exact matches, set `adj = False` and `cluster_adj = False` in `wildboottest()` and via the
                      `ssc(adj = False, cluster_adj = False)` option in `feols()`.
cluster_adj (bool, optional): Should a small sample adjustment be applied for the number of clusters? Defaults to True.
                        Note that the small sample adjustment in the bootstrap might differ from the one in the original model.
                        This will only affect the returned non-bootstrapped t-statistic, but not the bootstrapped p-value.
                        For exact matches, set `adj = False` and `cluster_adj = False` in `wildboottest()` and via the
                        `ssc(adj = False, cluster_adj = False)` option in `feols()`.
parallel (bool, optional): Should the bootstrap be run in parallel? Defaults to False.
seed (Union[str, None], optional): Option to provide a random seed. Defaults to None.

Returns: a pd.DataFrame with the original, non-bootstrapped t-statistic and bootstrapped p-value as well as
        the bootstrap type, inference type (HC vs CRV) and whether the null hypothesis was imposed on the bootstrap dgp.