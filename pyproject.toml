[tool.poetry]
name = "pyfixest"
version = "0.15.4"


description = "Fast high dimensional fixed effect estimation following syntax of the fixest R package. Supports OLS, IV and Poisson regression and a range of inference procedures. Additionally, experimentally supports (some of) the regression based new Difference-in-Differences Estimators (Did2s)."
authors = ["Alexander Fischer <alexander-fischer1801@t-online.de>", "Styfen SchÃ¤r"]
license = "MIT"
readme = "readme.md"
homepage = "https://s3alfisc.github.io/pyfixest/"
repository = "https://github.com/s3alfisc/pyfixest"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
pandas = ">=1.1.0"
numpy = ">=1.19.0"
scipy = ">=1.6"
formulaic = ">=0.6.6,<1.0.0"
lets-plot = ">=4.0.1"
numba = ">=0.58.0"
tabulate = ">=0.9.0"
tqdm = "^4.66.1"

[tool.poetry.group.dev.dependencies]
pytest=">=7.0.0"
polars = ">=0.20.1"
rpy2 = ">=3.5.0"
pytest-cov = "^4.1.0"
pytest-xdist = ">=3.5.0"
pyhdfe = ">=0.2.0"
pyarrow = ">=14.0.2"
wildboottest = ">=0.2.0"
pre-commit = "^3.6.0"

[tool.poetry.group.docs.dependencies]
quartodoc = ">=0.7.2"
jupyterlab = "^4.0.12"
jupytext = "^1.16.1"

[tool.pytest.ini_options]
filterwarnings =[
    "ignore::FutureWarning:rpy2",
    "ignore::DeprecationWarning:rpy2"
]

[tool.ruff]
line-length = 88
fix = true
#extend-include = ["*.ipynb"] # TODO: add ruff for notebooks

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# docs: https://docs.astral.sh/ruff/rules/
select = [
  "F", # Pyflakes
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "I", # isort
  "D", # flake8-docstrings
  "UP", # pyupgrade
  "SIM", # flake8-simplify
  "TRY", # tryceratops
]

ignore = [
# do not enable if formatting
# docs: https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  "W191",   # tab indentation
  "E111",   # indentation
  "E114",   # indentation
  "E117",   # over indented
  "D206",   # indent with spaces
  "D300",   # triple single quotes
  "E501",   # line length regulated by formatter
  "D105",   # missing docstring in magic method
  "D100",   # missing docstring in public module
  "D104",   # missing docstring in public package
  "SIM110", # Use all instead of `for` loop
  "TRY003", # Avoid specifying long messages outside the exception class
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["D100", "D103"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 88

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
