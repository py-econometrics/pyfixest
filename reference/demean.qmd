# demean { #pyfixest.demean }

`demean`



## Functions

| Name | Description |
| --- | --- |
| [demean_model](#pyfixest.demean.demean_model) | Demeans a single regression model. |

### demean_model { #pyfixest.demean.demean_model }

`demean.demean_model(Y, X, fe, weights, lookup_demeaned_data, na_index_str)`

Demeans a single regression model.

If the model has fixed effects, the fixed effects are demeaned using the PyHDFE package.
Prior to demeaning, the function checks if some of the variables have already been demeaned and uses values
from the cache `lookup_demeaned_data` if possible. If the model has no fixed effects, the function does not demean the data.

Args:
    Y (pd.DataFrame): A DataFrame of the dependent variable.
    X (pd.DataFrame): A DataFrame of the covariates.
    fe (pd.DataFrame or None): A DataFrame of the fixed effects. None if no fixed effects specified.
    weights (np.ndarray or None): A numpy array of weights. None if no weights.
    lookup_demeaned_data (Dict[str, Any]): A dictionary with keys for each fixed effects combination and
        potentially values of demeaned data frames. The function checks this dictionary to see if some of
        the variables have already been demeaned.
    na_index_str (str): A string with indices of dropped columns. Used for caching of demeaned variables.

Returns:
    Tuple[pd.DataFrame, pd.DataFrame, Optional[pd.DataFrame]]: A tuple of the following elements:
        - Yd (pd.DataFrame): A DataFrame of the demeaned dependent variable.
        - Xd (pd.DataFrame): A DataFrame of the demeaned covariates.
        - Id (pd.DataFrame or None): A DataFrame of the demeaned Instruments. None if no IV.